{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vaibhav-Bhatia-29/CE_MATLAB/blob/main/BTP%20project%20codes%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "USRkGIQXQhk7",
        "outputId": "30110125-ef4f-4703-d4f0-f48fc72b26df"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: category_encoders in /usr/local/lib/python3.10/dist-packages (2.6.4)\n",
            "Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (3.1.5)\n",
            "Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (1.26.4)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (1.6.0)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (1.13.1)\n",
            "Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (0.14.4)\n",
            "Requirement already satisfied: pandas>=1.0.5 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (2.2.2)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (1.0.1)\n",
            "Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl) (2.0.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0.5->category_encoders) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0.5->category_encoders) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0.5->category_encoders) (2024.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->category_encoders) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->category_encoders) (3.5.0)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.9.0->category_encoders) (24.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.0.5->category_encoders) (1.17.0)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-41637164-6697-40b9-8f10-5251f68aa30c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-41637164-6697-40b9-8f10-5251f68aa30c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving IBM_Telco_dataset - Copy.xlsx to IBM_Telco_dataset - Copy.xlsx\n",
            "Dataset Preview:\n",
            "   gender  SeniorCitizen  Partner  Dependents  tenure  PhoneService  \\\n",
            "0       0              0        1           0       1             0   \n",
            "1       1              0        0           0      34             1   \n",
            "2       1              0        0           0       2             1   \n",
            "3       1              0        0           0      45             0   \n",
            "4       0              0        0           0       2             1   \n",
            "\n",
            "   MultipleLines  InternetService  OnlineSecurity  OnlineBackup  \\\n",
            "0              0                0               0             1   \n",
            "1              0                0               1             0   \n",
            "2              0                0               1             1   \n",
            "3              0                0               1             0   \n",
            "4              0                1               0             0   \n",
            "\n",
            "   DeviceProtection  TechSupport  StreamingTV  StreamingMovies  \\\n",
            "0                 0            0            0                0   \n",
            "1                 1            0            0                0   \n",
            "2                 0            0            0                0   \n",
            "3                 1            1            0                0   \n",
            "4                 0            0            0                0   \n",
            "\n",
            "         Contract  PaperlessBilling              PaymentMethod  \\\n",
            "0  Month-to-month                 1           Electronic check   \n",
            "1        One year                 0               Mailed check   \n",
            "2  Month-to-month                 1               Mailed check   \n",
            "3        One year                 0  Bank transfer (automatic)   \n",
            "4  Month-to-month                 1           Electronic check   \n",
            "\n",
            "   MonthlyCharges  TotalCharges  Churn  \n",
            "0           29.85         29.85      0  \n",
            "1           56.95       1889.50      0  \n",
            "2           53.85        108.15      1  \n",
            "3           42.30       1840.75      0  \n",
            "4           70.70        151.65      1  \n",
            "\n",
            "Categorical Columns:\n",
            "Index(['Contract', 'PaymentMethod'], dtype='object')\n",
            "\n",
            "Encoded Dataset Preview:\n",
            "   gender  SeniorCitizen  Partner  Dependents  tenure  PhoneService  \\\n",
            "0       0              0        1           0       1             0   \n",
            "1       1              0        0           0      34             1   \n",
            "2       1              0        0           0       2             1   \n",
            "3       1              0        0           0      45             0   \n",
            "4       0              0        0           0       2             1   \n",
            "\n",
            "   MultipleLines  InternetService  OnlineSecurity  OnlineBackup  ...  \\\n",
            "0              0                0               0             1  ...   \n",
            "1              0                0               1             0  ...   \n",
            "2              0                0               1             1  ...   \n",
            "3              0                0               1             0  ...   \n",
            "4              0                1               0             0  ...   \n",
            "\n",
            "   StreamingMovies  Contract_0  Contract_1  PaperlessBilling  PaymentMethod_0  \\\n",
            "0                0           0           1                 1                0   \n",
            "1                0           1           0                 0                0   \n",
            "2                0           0           1                 1                0   \n",
            "3                0           1           0                 0                0   \n",
            "4                0           0           1                 1                0   \n",
            "\n",
            "   PaymentMethod_1  PaymentMethod_2  MonthlyCharges  TotalCharges  Churn  \n",
            "0                0                1           29.85         29.85      0  \n",
            "1                1                0           56.95       1889.50      0  \n",
            "2                1                0           53.85        108.15      1  \n",
            "3                1                1           42.30       1840.75      0  \n",
            "4                0                1           70.70        151.65      1  \n",
            "\n",
            "[5 rows x 23 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:411: FutureWarning: The `_get_tags` method is deprecated in 1.6 and will be removed in 1.7. Please implement the `__sklearn_tags__` method.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Encoded dataset saved as 'encoded_dataset.xlsx'.\n"
          ]
        }
      ],
      "source": [
        "# Install required libraries\n",
        "!pip install category_encoders openpyxl\n",
        "\n",
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import category_encoders as ce\n",
        "from google.colab import files\n",
        "\n",
        "# Step 1: Upload the Excel dataset\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Step 2: Load the dataset into a pandas DataFrame\n",
        "# Assume the dataset is in Excel format\n",
        "for filename in uploaded.keys():\n",
        "    df = pd.read_excel(filename)\n",
        "\n",
        "df = df.dropna()\n",
        "# Display the first few rows of the dataset\n",
        "print(\"Dataset Preview:\")\n",
        "print(df.head())\n",
        "\n",
        "# Step 3: Identify categorical columns\n",
        "categorical_columns = df.select_dtypes(include=['object', 'category']).columns\n",
        "print(\"\\nCategorical Columns:\")\n",
        "print(categorical_columns)\n",
        "\n",
        "# Step 4: Apply Binary Encoding\n",
        "# Initialize the encoder\n",
        "binary_encoder = ce.BinaryEncoder(cols=categorical_columns)\n",
        "\n",
        "# Apply encoding\n",
        "df_encoded = binary_encoder.fit_transform(df)\n",
        "\n",
        "# Display the transformed dataset\n",
        "print(\"\\nEncoded Dataset Preview:\")\n",
        "print(df_encoded.head())\n",
        "\n",
        "# Step 5: Save the encoded dataset (optional)\n",
        "df_encoded.to_excel(\"encoded_dataset.xlsx\", index=False)\n",
        "print(\"\\nEncoded dataset saved as 'encoded_dataset.xlsx'.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Print column names and their data types\n",
        "print(\"Column Names and Data Types:\")\n",
        "print(df_encoded.dtypes)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0hUHpfgvTZeK",
        "outputId": "b4acbca8-5abd-4d50-b860-a3687e0a3c6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Column Names and Data Types:\n",
            "gender                int64\n",
            "SeniorCitizen         int64\n",
            "Partner               int64\n",
            "Dependents            int64\n",
            "tenure                int64\n",
            "PhoneService          int64\n",
            "MultipleLines         int64\n",
            "InternetService       int64\n",
            "OnlineSecurity        int64\n",
            "OnlineBackup          int64\n",
            "DeviceProtection      int64\n",
            "TechSupport           int64\n",
            "StreamingTV           int64\n",
            "StreamingMovies       int64\n",
            "Contract_0            int64\n",
            "Contract_1            int64\n",
            "PaperlessBilling      int64\n",
            "PaymentMethod_0       int64\n",
            "PaymentMethod_1       int64\n",
            "PaymentMethod_2       int64\n",
            "MonthlyCharges      float64\n",
            "TotalCharges        float64\n",
            "Churn                 int64\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Specify the target column\n",
        "target_column = 'Churn'  # Based on the provided column list\n",
        "\n",
        "# Step 1: Separate features (X) and target (y)\n",
        "X = df_encoded.drop(columns=[target_column])\n",
        "y = df_encoded[target_column]\n",
        "\n",
        "# Step 2: Split the dataset into training (80%) and testing (20%)\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "print(\"\\nTraining and Testing Dataset Shapes:\")\n",
        "print(f\"X_train: {X_train.shape}, X_test: {X_test.shape}\")\n",
        "print(f\"y_train: {y_train.shape}, y_test: {y_test.shape}\")\n",
        "\n",
        "# Step 3: Train and Evaluate Models\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Define models\n",
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(),\n",
        "    \"K-Nearest Neighbors\": KNeighborsClassifier(),\n",
        "    \"Random Forest\": RandomForestClassifier()\n",
        "}\n",
        "\n",
        "# Function to evaluate and display results\n",
        "def evaluate_model(name, model):\n",
        "    print(f\"\\n{name} Results:\")\n",
        "    model.fit(X_train, y_train)\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    # Accuracy\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    print(f\"Accuracy: {acc:.4f}\")\n",
        "\n",
        "    # Classification Report\n",
        "    print(\"\\nClassification Report:\")\n",
        "    print(classification_report(y_test, y_pred))\n",
        "\n",
        "    # Confusion Matrix\n",
        "    print(\"\\nConfusion Matrix:\")\n",
        "    cm = confusion_matrix(y_test, y_pred)\n",
        "    print(cm)\n",
        "\n",
        "    # Plot Confusion Matrix\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "    plt.title(f\"{name} Confusion Matrix\")\n",
        "    plt.xlabel(\"Predicted\")\n",
        "    plt.ylabel(\"Actual\")\n",
        "    plt.show()\n",
        "\n",
        "# Step 4: Iterate through models\n",
        "for name, model in models.items():\n",
        "    evaluate_model(name, model)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hXmsO-EAU4V0",
        "outputId": "6758a629-8699-403e-c845-6c5396fda097"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Training and Testing Dataset Shapes:\n",
            "X_train: (5625, 22), X_test: (1407, 22)\n",
            "y_train: (5625,), y_test: (1407,)\n",
            "\n",
            "Logistic Regression Results:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7918\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.89      0.86      1033\n",
            "           1       0.63      0.52      0.57       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.70      0.72      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[920 113]\n",
            " [180 194]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "K-Nearest Neighbors Results:\n",
            "Accuracy: 0.7719\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.89      0.85      1033\n",
            "           1       0.59      0.45      0.51       374\n",
            "\n",
            "    accuracy                           0.77      1407\n",
            "   macro avg       0.71      0.67      0.68      1407\n",
            "weighted avg       0.76      0.77      0.76      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[917 116]\n",
            " [205 169]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Random Forest Results:\n",
            "Accuracy: 0.7846\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.90      0.86      1033\n",
            "           1       0.63      0.47      0.53       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.73      0.68      0.70      1407\n",
            "weighted avg       0.77      0.78      0.77      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[930 103]\n",
            " [200 174]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Step 1: Define range of n_neighbors (from 1 to 30)\n",
        "neighbors_range = range(1, 31)\n",
        "\n",
        "# Step 2: Initialize lists to store training and testing scores\n",
        "train_scores = []\n",
        "test_scores = []\n",
        "\n",
        "# Step 3: Iterate over n_neighbors values and evaluate model\n",
        "for n_neighbors in neighbors_range:\n",
        "    # Initialize KNN model with current n_neighbors\n",
        "    knn = KNeighborsClassifier(n_neighbors=n_neighbors)\n",
        "\n",
        "    # Train the model\n",
        "    knn.fit(X_train, y_train)\n",
        "\n",
        "    # Calculate train and test scores\n",
        "    train_score = knn.score(X_train, y_train)\n",
        "    test_score = knn.score(X_test, y_test)\n",
        "\n",
        "    # Append the scores to their respective lists\n",
        "    train_scores.append(train_score)\n",
        "    test_scores.append(test_score)\n",
        "\n",
        "# Step 4: Convert lists to arrays for easy access\n",
        "train_scores = np.array(train_scores)\n",
        "test_scores = np.array(test_scores)\n",
        "\n",
        "# Step 5: Plot the results\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot training scores\n",
        "plt.plot(neighbors_range, train_scores, label='Train Score', color='blue', marker='o')\n",
        "\n",
        "# Plot testing scores\n",
        "plt.plot(neighbors_range, test_scores, label='Test Score', color='red', marker='o')\n",
        "\n",
        "# Adding titles and labels\n",
        "plt.title('KNN Performance with Different n_neighbors', fontsize=14)\n",
        "plt.xlabel('n_neighbors', fontsize=12)\n",
        "plt.ylabel('Accuracy', fontsize=12)\n",
        "\n",
        "# Show legend\n",
        "plt.legend()\n",
        "\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Step 6: Print train and test scores\n",
        "print(f\"Train Scores: {train_scores}\")\n",
        "print(f\"Test Scores: {test_scores}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 743
        },
        "id": "BOylsG0ZWT5A",
        "outputId": "ce48ee15-328b-499a-d4ba-804509c676cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Scores: [0.99751111 0.85902222 0.86097778 0.83111111 0.83182222 0.82097778\n",
            " 0.81706667 0.81333333 0.81386667 0.80924444 0.81368889 0.80693333\n",
            " 0.80711111 0.80124444 0.80462222 0.80106667 0.80035556 0.79697778\n",
            " 0.79928889 0.79662222 0.79964444 0.79662222 0.79555556 0.79644444\n",
            " 0.79804444 0.79448889 0.79413333 0.7936     0.79466667 0.79377778]\n",
            "Test Scores: [0.7249467  0.75692964 0.75408671 0.77114428 0.77185501 0.7761194\n",
            " 0.77185501 0.78606965 0.78606965 0.78535892 0.78464819 0.78393746\n",
            " 0.7938877  0.78322672 0.78464819 0.78393746 0.78535892 0.78606965\n",
            " 0.78820185 0.78678038 0.78109453 0.78464819 0.78606965 0.79033404\n",
            " 0.79033404 0.7938877  0.78962331 0.78820185 0.78606965 0.78820185]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Set n_neighbors to 13\n",
        "n_neighbors = 13\n",
        "\n",
        "# Step 2: Initialize KNN model with n_neighbors = 13\n",
        "knn = KNeighborsClassifier(n_neighbors=n_neighbors)\n",
        "\n",
        "# Step 3: Train the model\n",
        "knn.fit(X_train, y_train)\n",
        "\n",
        "# Step 4: Calculate train and test scores\n",
        "train_score = knn.score(X_train, y_train)\n",
        "test_score = knn.score(X_test, y_test)\n",
        "\n",
        "# Step 5: Print the results\n",
        "print(f\"\\nKNN with n_neighbors = {n_neighbors} Results:\")\n",
        "print(f\"Train Accuracy: {train_score:.4f}\")\n",
        "print(f\"Test Accuracy: {test_score:.4f}\")\n",
        "\n",
        "# Step 6: Classification report and confusion matrix\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "\n",
        "y_pred = knn.predict(X_test)\n",
        "\n",
        "# Classification Report\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "# Confusion Matrix\n",
        "print(\"\\nConfusion Matrix:\")\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "print(cm)\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(f\"KNN (n_neighbors={n_neighbors}) Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "id": "I6h_qp-pYhC4",
        "outputId": "c8eb3409-9548-4b96-daa5-b24657fef30a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "KNN with n_neighbors = 13 Results:\n",
            "Train Accuracy: 0.8071\n",
            "Test Accuracy: 0.7939\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.93      0.87      1033\n",
            "           1       0.68      0.42      0.52       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.75      0.67      0.69      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[960  73]\n",
            " [217 157]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Set n_neighbors to 13 and use class_weight='balanced'\n",
        "n_neighbors = 13\n",
        "knn = KNeighborsClassifier(n_neighbors=n_neighbors, weights='uniform', algorithm='auto')\n",
        "\n",
        "# Step 2: Train the model with class_weight='balanced'\n",
        "knn.fit(X_train, y_train)\n",
        "\n",
        "# Step 3: Calculate train and test scores\n",
        "train_score = knn.score(X_train, y_train)\n",
        "test_score = knn.score(X_test, y_test)\n",
        "\n",
        "# Step 4: Print the results\n",
        "print(f\"\\nKNN with n_neighbors = {n_neighbors} and class_weight='balanced' Results:\")\n",
        "print(f\"Train Accuracy: {train_score:.4f}\")\n",
        "print(f\"Test Accuracy: {test_score:.4f}\")\n",
        "\n",
        "# Step 5: Classification report and confusion matrix\n",
        "y_pred = knn.predict(X_test)\n",
        "\n",
        "# Classification Report\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "# Confusion Matrix\n",
        "print(\"\\nConfusion Matrix:\")\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "print(cm)\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(f\"KNN (n_neighbors={n_neighbors}, class_weight='balanced') Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "id": "-Nw3wJ5-ZLut",
        "outputId": "7873adce-317a-426e-d903-22e07b4529c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "KNN with n_neighbors = 13 and class_weight='balanced' Results:\n",
            "Train Accuracy: 0.8071\n",
            "Test Accuracy: 0.7939\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.93      0.87      1033\n",
            "           1       0.68      0.42      0.52       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.75      0.67      0.69      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[960  73]\n",
            " [217 157]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Get predicted probabilities\n",
        "y_prob = knn.predict_proba(X_test)[:, 1]  # Get probability of class '1' (churn)\n",
        "\n",
        "# Step 2: Adjust the threshold\n",
        "threshold = 0.265  # Lowering the threshold to favor the minority class\n",
        "y_pred_adjusted = (y_prob >= threshold).astype(int)\n",
        "\n",
        "# Step 3: Print the results\n",
        "print(\"\\nAdjusted KNN Results (Threshold = 0.3):\")\n",
        "print(f\"Train Accuracy: {accuracy_score(y_train, knn.predict(X_train)):.4f}\")\n",
        "print(f\"Test Accuracy: {accuracy_score(y_test, y_pred_adjusted):.4f}\")\n",
        "\n",
        "# Step 4: Classification report and confusion matrix\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred_adjusted))\n",
        "\n",
        "print(\"\\nConfusion Matrix:\")\n",
        "cm_adjusted = confusion_matrix(y_test, y_pred_adjusted)\n",
        "print(cm_adjusted)\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "sns.heatmap(cm_adjusted, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(f\"KNN (n_neighbors={n_neighbors}, class_weight='balanced', threshold=0.3) Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "id": "0p6jinMSZt6L",
        "outputId": "513514f1-83ad-4922-92d8-f3f5bb137a6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Adjusted KNN Results (Threshold = 0.3):\n",
            "Train Accuracy: 0.8071\n",
            "Test Accuracy: 0.7150\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.72      0.79      1033\n",
            "           1       0.48      0.69      0.56       374\n",
            "\n",
            "    accuracy                           0.71      1407\n",
            "   macro avg       0.67      0.71      0.68      1407\n",
            "weighted avg       0.76      0.71      0.73      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[748 285]\n",
            " [116 258]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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bW3F5X379kVwcDBsbGxgaWmJIUOGwMvLC56engCAVq1awc3NDd988w3CwsIQHx+PsWPHIigoSGOQTeoY8OoYfX19+Pn5wc/PT9tDISIi+qzI8Hn+1NqcOXOgp6eHTp06QaFQwMfHB4sWLRLX6+vrIzIyEgMHDoSXlxfMzMwQEBCAyZMna3HURYtMEARB24Mg3ZXKH4EhUnP5XrK2h0D0WartYlmo/U//+3aB9TWmefkC64sKH2t4iYiIiEinsaSBiIiIJEEbNbz0eWDAS0RERJIg+5DfBCadwJIGIiIiItJpzPASERGRJLCkQboY8BIREZEksKJBuljSQEREREQ6jRleIiIikgQ9pngliwEvERERSQJreKWLJQ1EREREpNOY4SUiIiJJYEWDdDHgJSIiIknQAyNeqWLAS0RERJLADK90sYaXiIiIiHQaM7xEREQkCZylQboY8BIREZEkcB5e6WJJAxERERHpNGZ4iYiISBKY4JUuBrxEREQkCSxpkC6WNBARERGRTmOGl4iIiCSBCV7pYsBLREREksCvtaWLjz0RERER6TRmeImIiEgSZKxpkCwGvERERCQJDHeliwEvERERSQKnJZMu1vASERERkU5jhpeIiIgkgfld6WLAS0RERJLAigbpYkkDEREREek0ZniJiIhIEjgtmXQx4CUiIiJJ4Nfa0sXHnoiIiIh0GjO8REREJAksaZAuBrxEREQkCQx3pYslDURERESk05jhJSIiIklgSYN0MeAlIiIiSeDX2tLFgJeIiIgkgRle6eKHHSIiIiLSaczwEhERkSQwvytdDHiJiIhIEljRIF0saSAiIiIincYMLxEREUmCHosaJIsBLxEREUkCSxqkiyUNRERERKTTmOElIiIiSZCxpEGyGPASERGRJLCkQbpY0kBERERUiBYvXozq1avD0tISlpaW8PLywu7du8X1qampCAoKgq2tLczNzdGpUyckJCSo9BEXFwdfX1+YmprC3t4eo0aNQkZGxqfelSKLAS8RERFJgh5kBXbLj1KlSmH69OmIjo7G2bNn0bx5c3Ts2BFXrlwBAIwYMQI7duzAxo0bcfjwYTx8+BD+/v7i9pmZmfD19UVaWhpOnDiBVatWYeXKlRg/fnyBHh9dJhMEQdD2IEh3pfLDJ5Gay/eStT0Eos9SbRfLQu1/79XHBdaXj5vdR21vY2OD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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import numpy as np\n",
        "\n",
        "# Define the parameter grid for Logistic Regression\n",
        "param_grid = {\n",
        "    'C': np.logspace(-4, 4, 20),  # Logspace for C values from 10^-4 to 10^4\n",
        "    'solver': ['liblinear']       # Using liblinear solver\n",
        "}\n",
        "\n",
        "# Initialize the Logistic Regression model\n",
        "logreg = LogisticRegression(max_iter=20)\n",
        "\n",
        "# Set up GridSearchCV with cross-validation and verbose output\n",
        "grid_search = GridSearchCV(estimator=logreg, param_grid=param_grid, cv=5, verbose=1)\n",
        "\n",
        "# Fit GridSearchCV on the training data\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Display the best parameters and score\n",
        "print(f\"Best Hyperparameters for Logistic Regression: {grid_search.best_params_}\")\n",
        "print(f\"Best Cross-Validation Score: {grid_search.best_score_:.4f}\")\n",
        "\n",
        "# Use the best estimator from GridSearchCV to predict on the test set\n",
        "y_pred = grid_search.best_estimator_.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "print(f\"\\nTest Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "# Plot the confusion matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"Logistic Regression Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "kcY9wiktaGkM",
        "outputId": "e9e8815d-3960-4dc8-f465-3faed7f0cbda"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1243: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Hyperparameters for Logistic Regression: {'C': 0.004832930238571752, 'solver': 'liblinear'}\n",
            "Best Cross-Validation Score: 0.8048\n",
            "\n",
            "Test Accuracy: 0.7967\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.91      0.87      1033\n",
            "           1       0.66      0.48      0.56       374\n",
            "\n",
            "    accuracy                           0.80      1407\n",
            "   macro avg       0.75      0.70      0.71      1407\n",
            "weighted avg       0.78      0.80      0.79      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.utils import resample\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "\n",
        "# Undersample the majority class\n",
        "X_minority = X_train[y_train == 1]\n",
        "X_majority = X_train[y_train == 0]\n",
        "\n",
        "X_majority_undersampled, y_majority_undersampled = resample(X_majority, y_train[y_train == 0],\n",
        "                                                           n_samples=len(X_minority), random_state=42)\n",
        "\n",
        "# Combine undersampled majority class with minority class\n",
        "X_train_balanced = pd.concat([X_minority, X_majority_undersampled])\n",
        "y_train_balanced = pd.concat([y_train[y_train == 1], y_majority_undersampled])\n",
        "\n",
        "# Define Logistic Regression with balanced class weights\n",
        "lr = LogisticRegression(class_weight='balanced', max_iter=20, verbose=True)\n",
        "\n",
        "# Train model\n",
        "lr.fit(X_train_balanced, y_train_balanced)\n",
        "\n",
        "# Predict and evaluate\n",
        "y_pred = lr.predict(X_test)\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WXjz3GksfgBb",
        "outputId": "2ab723b8-b557-4c1c-eabb-a8bfe20b27f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7072\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.67      0.77      1033\n",
            "           1       0.47      0.80      0.59       374\n",
            "\n",
            "    accuracy                           0.71      1407\n",
            "   macro avg       0.69      0.74      0.68      1407\n",
            "weighted avg       0.79      0.71      0.72      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Specify the target column\n",
        "target_column = 'Churn'\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = df_encoded.drop(columns=[target_column])\n",
        "y = df_encoded[target_column]\n",
        "\n",
        "# Split the dataset into training (80%) and testing (20%)\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Define Logistic Regression with class weight 'balanced'\n",
        "log_reg = LogisticRegression(solver='liblinear', max_iter=1000, class_weight='balanced')\n",
        "\n",
        "# Define hyperparameter grid for Logistic Regression\n",
        "param_grid = {\n",
        "    'C': np.logspace(-4, 4, 20),  # Regularization parameter\n",
        "    'penalty': ['l1', 'l2'],  # Regularization type\n",
        "    'solver': ['liblinear']  # Solver type\n",
        "}\n",
        "\n",
        "# Hyperparameter tuning using GridSearchCV\n",
        "grid_search = GridSearchCV(log_reg, param_grid, cv=5, verbose=True, n_jobs=-1)\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Display the best parameters\n",
        "print(f\"Best Parameters: {grid_search.best_params_}\")\n",
        "\n",
        "# Evaluate the model with the best parameters\n",
        "best_model = grid_search.best_estimator_\n",
        "y_pred = best_model.predict(X_test)\n",
        "\n",
        "# Display accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "# Classification report\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "# Confusion matrix\n",
        "print(\"\\nConfusion Matrix:\")\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "print(cm)\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"Logistic Regression Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 784
        },
        "id": "VsoPSbULjaOU",
        "outputId": "69369644-924f-4a27-a311-5ad3dd779e52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n",
            "Best Parameters: {'C': 0.615848211066026, 'penalty': 'l2', 'solver': 'liblinear'}\n",
            "Accuracy: 0.7370\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.72      0.80      1033\n",
            "           1       0.50      0.79      0.62       374\n",
            "\n",
            "    accuracy                           0.74      1407\n",
            "   macro avg       0.70      0.75      0.71      1407\n",
            "weighted avg       0.80      0.74      0.75      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[741 292]\n",
            " [ 78 296]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from tqdm import tqdm\n",
        "import numpy as np\n",
        "\n",
        "# Specify the target column\n",
        "target_column = 'Churn'\n",
        "\n",
        "# Separate features (X) and target (y)\n",
        "X = df_encoded.drop(columns=[target_column])\n",
        "y = df_encoded[target_column]\n",
        "\n",
        "# Split the dataset into training (80%) and testing (20%)\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Define Random Forest classifier\n",
        "rf = RandomForestClassifier(random_state=42, class_weight='balanced_subsample')\n",
        "\n",
        "# Hyperparameter grid for Randomized Search based on the parameters you provided\n",
        "param_dist_rf = {\n",
        "    'n_estimators': [10, 1000, 50],\n",
        "    'max_depth': [None, 3, 5, 10],\n",
        "    'min_samples_split': [2, 20, 200],\n",
        "    'min_samples_leaf': [1, 20, 200]\n",
        "}\n",
        "\n",
        "# Setup RandomizedSearchCV\n",
        "random_search_rf = RandomizedSearchCV(\n",
        "    rf, param_distributions=param_dist_rf, n_iter=20, cv=5, verbose=2, n_jobs=-1, random_state=42\n",
        ")\n",
        "\n",
        "# Wrap RandomizedSearchCV fitting with tqdm progress tracking\n",
        "with tqdm(total=20, desc=\"Training Random Forest\", unit=\"iteration\") as pbar:\n",
        "    def update(*args):\n",
        "        pbar.update(1)\n",
        "\n",
        "    # Fit the model with a custom progress update\n",
        "    random_search_rf.fit(X_train, y_train)\n",
        "    update()  # Update progress for each iteration (this will keep track)\n",
        "\n",
        "# Display best parameters\n",
        "print(f\"Best Parameters: {random_search_rf.best_params_}\")\n",
        "\n",
        "# Evaluate the model with the best parameters\n",
        "best_rf_model = random_search_rf.best_estimator_\n",
        "y_pred_rf = best_rf_model.predict(X_test)\n",
        "\n",
        "# Display accuracy\n",
        "accuracy_rf = accuracy_score(y_test, y_pred_rf)\n",
        "print(f\"Accuracy: {accuracy_rf:.4f}\")\n",
        "\n",
        "# Classification report\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred_rf))\n",
        "\n",
        "# Confusion matrix\n",
        "print(\"\\nConfusion Matrix:\")\n",
        "cm_rf = confusion_matrix(y_test, y_pred_rf)\n",
        "print(cm_rf)\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "sns.heatmap(cm_rf, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"Random Forest Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        },
        "id": "amaYu5__ljVX",
        "outputId": "ae6edf49-082a-4645-c29a-d8f00ca9a624"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rTraining Random Forest:   0%|          | 0/20 [00:00<?, ?iteration/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training Random Forest:   5%|▌         | 1/20 [02:46<52:52, 166.96s/iteration]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameters: {'n_estimators': 10, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': None}\n",
            "Accuracy: 0.7861\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.93      0.86      1033\n",
            "           1       0.66      0.40      0.50       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.74      0.66      0.68      1407\n",
            "weighted avg       0.77      0.79      0.77      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[958  75]\n",
            " [226 148]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install required libraries for XGBoost, CatBoost, and LightGBM\n",
        "!pip install xgboost catboost lightgbm\n",
        "\n",
        "# Import libraries\n",
        "from xgboost import XGBClassifier\n",
        "from catboost import CatBoostClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Step 6: Separate features (X) and target (y)\n",
        "# Assuming the target column is 'Churn'\n",
        "target_column = 'Churn'\n",
        "X = df_encoded.drop(columns=[target_column])\n",
        "y = df_encoded[target_column]\n",
        "\n",
        "# Step 7: Split the dataset into training (80%) and testing (20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Define a function to train and evaluate models\n",
        "def evaluate_model(model, model_name):\n",
        "    print(f\"\\n--- {model_name} ---\")\n",
        "    # Fit the model\n",
        "    model.fit(X_train, y_train)\n",
        "    # Make predictions\n",
        "    y_pred = model.predict(X_test)\n",
        "    # Evaluate performance\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    print(f\"Accuracy: {accuracy:.4f}\")\n",
        "    print(\"\\nClassification Report:\")\n",
        "    print(classification_report(y_test, y_pred))\n",
        "    # Confusion Matrix\n",
        "    print(\"\\nConfusion Matrix:\")\n",
        "    cm = confusion_matrix(y_test, y_pred)\n",
        "    print(cm)\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "    plt.title(f\"{model_name} Confusion Matrix\")\n",
        "    plt.xlabel(\"Predicted\")\n",
        "    plt.ylabel(\"Actual\")\n",
        "    plt.show()\n",
        "\n",
        "# Step 8: Initialize and evaluate each model\n",
        "# XGBoost\n",
        "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
        "evaluate_model(xgb_model, \"XGBoost\")\n",
        "\n",
        "# CatBoost\n",
        "catboost_model = CatBoostClassifier(verbose=0, random_state=42)\n",
        "evaluate_model(catboost_model, \"CatBoost\")\n",
        "\n",
        "# LightGBM\n",
        "lightgbm_model = LGBMClassifier(random_state=42)\n",
        "evaluate_model(lightgbm_model, \"LightGBM\")\n"
      ],
      "metadata": {
        "id": "x85njQFcmg96",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "66e9e61c-9785-417f-a553-6f6aa48ee682"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.1.3)\n",
            "Collecting catboost\n",
            "  Downloading catboost-1.2.7-cp310-cp310-manylinux2014_x86_64.whl.metadata (1.2 kB)\n",
            "Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (4.5.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.26.4)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/dist-packages (from xgboost) (2.23.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.13.1)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.8.0)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.2.2)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.24.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.17.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.55.3)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (11.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.2.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (9.0.0)\n",
            "Downloading catboost-1.2.7-cp310-cp310-manylinux2014_x86_64.whl (98.7 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 MB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: catboost\n",
            "Successfully installed catboost-1.2.7\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/dask/dataframe/__init__.py:42: FutureWarning: \n",
            "Dask dataframe query planning is disabled because dask-expr is not installed.\n",
            "\n",
            "You can install it with `pip install dask[dataframe]` or `conda install dask`.\n",
            "This will raise in a future version.\n",
            "\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- XGBoost ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [16:43:54] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7740\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.88      0.85      1033\n",
            "           1       0.59      0.49      0.54       374\n",
            "\n",
            "    accuracy                           0.77      1407\n",
            "   macro avg       0.71      0.68      0.69      1407\n",
            "weighted avg       0.76      0.77      0.77      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[905 128]\n",
            " [190 184]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- CatBoost ---\n",
            "Accuracy: 0.7889\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.89      0.86      1033\n",
            "           1       0.63      0.50      0.56       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.70      0.71      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[924 109]\n",
            " [188 186]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- LightGBM ---\n",
            "[LightGBM] [Info] Number of positive: 1495, number of negative: 4130\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001848 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 621\n",
            "[LightGBM] [Info] Number of data points in the train set: 5625, number of used features: 22\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n",
            "Accuracy: 0.7854\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.88      0.86      1033\n",
            "           1       0.62      0.51      0.56       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.72      0.70      0.71      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[914 119]\n",
            " [183 191]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Identify column types\n",
        "binary_columns = [col for col in df.columns if df[col].nunique() == 2]\n",
        "categorical_columns = list(set(df.select_dtypes(include=['object', 'category']).columns) - set(binary_columns))\n",
        "numerical_columns = list(set(df.columns) - set(categorical_columns) - set(binary_columns) - {target_column})\n",
        "\n",
        "print(\"Binary Columns:\", binary_columns)\n",
        "print(\"Categorical Columns:\", categorical_columns)\n",
        "print(\"Numerical Columns:\", numerical_columns)\n",
        "\n",
        "# Step 2: Apply Binary Encoding to non-binary categorical columns\n",
        "binary_encoder = ce.BinaryEncoder(cols=categorical_columns)\n",
        "df_encoded = binary_encoder.fit_transform(df)\n",
        "\n",
        "# Step 3: Scale numerical features\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "df_encoded[numerical_columns] = scaler.fit_transform(df_encoded[numerical_columns])\n",
        "\n",
        "# Step 4: Separate features and target\n",
        "X = df_encoded.drop(columns=[target_column])\n",
        "y = df_encoded[target_column]\n",
        "\n",
        "# Step 5: Convert target column to integers (if necessary)\n",
        "y = y.astype(int)\n",
        "\n",
        "# Step 6: Split dataset into train and test sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "\n",
        "# Step 7: Apply SMOTE on training data\n",
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)\n",
        "\n",
        "# Step 8: Define a function to train and evaluate models\n",
        "def evaluate_model(model, model_name):\n",
        "    print(f\"\\n--- {model_name} ---\")\n",
        "    # Fit the model\n",
        "    model.fit(X_train_smote, y_train_smote)\n",
        "    # Make predictions\n",
        "    y_pred = model.predict(X_test)\n",
        "    # Evaluate performance\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    print(f\"Accuracy: {accuracy:.4f}\")\n",
        "    print(\"\\nClassification Report:\")\n",
        "    print(classification_report(y_test, y_pred))\n",
        "    # Confusion Matrix\n",
        "    print(\"\\nConfusion Matrix:\")\n",
        "    cm = confusion_matrix(y_test, y_pred)\n",
        "    print(cm)\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "    plt.title(f\"{model_name} Confusion Matrix\")\n",
        "    plt.xlabel(\"Predicted\")\n",
        "    plt.ylabel(\"Actual\")\n",
        "    plt.show()\n",
        "\n",
        "# Step 9: Initialize and evaluate each model\n",
        "# XGBoost\n",
        "from xgboost import XGBClassifier\n",
        "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
        "evaluate_model(xgb_model, \"XGBoost\")\n",
        "\n",
        "# CatBoost\n",
        "from catboost import CatBoostClassifier\n",
        "catboost_model = CatBoostClassifier(verbose=0, random_state=42)\n",
        "evaluate_model(catboost_model, \"CatBoost\")\n",
        "\n",
        "# LightGBM\n",
        "from lightgbm import LGBMClassifier\n",
        "lightgbm_model = LGBMClassifier(random_state=42)\n",
        "evaluate_model(lightgbm_model, \"LightGBM\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qUSqtMCEzbHn",
        "outputId": "f4f03376-2ba1-48c8-d379-df703e80d7b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Binary Columns: ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'PaperlessBilling', 'Churn']\n",
            "Categorical Columns: ['Contract', 'PaymentMethod']\n",
            "Numerical Columns: ['tenure', 'TotalCharges', 'MonthlyCharges']\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:411: FutureWarning: The `_get_tags` method is deprecated in 1.6 and will be removed in 1.7. Please implement the `__sklearn_tags__` method.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- XGBoost ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [16:50:52] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.7434\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.78      0.82      1033\n",
            "           1       0.51      0.63      0.57       374\n",
            "\n",
            "    accuracy                           0.74      1407\n",
            "   macro avg       0.68      0.71      0.69      1407\n",
            "weighted avg       0.76      0.74      0.75      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[810 223]\n",
            " [138 236]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- CatBoost ---\n",
            "Accuracy: 0.7584\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.80      0.83      1033\n",
            "           1       0.54      0.66      0.59       374\n",
            "\n",
            "    accuracy                           0.76      1407\n",
            "   macro avg       0.70      0.73      0.71      1407\n",
            "weighted avg       0.78      0.76      0.77      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[822 211]\n",
            " [129 245]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- LightGBM ---\n",
            "[LightGBM] [Info] Number of positive: 4130, number of negative: 4130\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002233 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 803\n",
            "[LightGBM] [Info] Number of data points in the train set: 8260, number of used features: 22\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
            "Accuracy: 0.7541\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.79      0.82      1033\n",
            "           1       0.53      0.66      0.59       374\n",
            "\n",
            "    accuracy                           0.75      1407\n",
            "   macro avg       0.70      0.73      0.71      1407\n",
            "weighted avg       0.78      0.75      0.76      1407\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            "[[813 220]\n",
            " [126 248]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import xgboost as xgb\n",
        "import catboost as cb\n",
        "import lightgbm as lgb\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Step 1: Split the data into features and target\n",
        "target_column = 'Churn'  # Assume target column is named 'Churn'\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "# Step 2: Label Encoding for categorical columns\n",
        "categorical_columns = X.select_dtypes(include=['object']).columns\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "for col in categorical_columns:\n",
        "    X[col] = label_encoder.fit_transform(X[col])\n",
        "\n",
        "# Step 3: Split the dataset into training (80%) and testing (20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 4: Perform IQR-based outlier analysis on the numeric features in the training data\n",
        "def remove_outliers(df):\n",
        "    # Select only numeric columns\n",
        "    numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns\n",
        "    Q1 = df[numeric_columns].quantile(0.25)\n",
        "    Q3 = df[numeric_columns].quantile(0.75)\n",
        "    IQR = Q3 - Q1\n",
        "    # Remove rows that have outliers\n",
        "    df_no_outliers = df[~((df[numeric_columns] < (Q1 - 1.5 * IQR)) | (df[numeric_columns] > (Q3 + 1.5 * IQR))).any(axis=1)]\n",
        "    return df_no_outliers\n",
        "\n",
        "# Apply IQR outlier removal on the training set (only on numeric columns)\n",
        "X_train_no_outliers = remove_outliers(X_train)\n",
        "y_train_no_outliers = y_train[X_train_no_outliers.index]  # Keep y aligned with X after removing rows\n",
        "\n",
        "# Step 5: Train XGBoost, CatBoost, and LightGBM models using default parameters\n",
        "\n",
        "# XGBoost Model\n",
        "xgb_model = xgb.XGBClassifier(random_state=42)\n",
        "xgb_model.fit(X_train_no_outliers, y_train_no_outliers)\n",
        "y_pred_xgb = xgb_model.predict(X_test)\n",
        "\n",
        "# CatBoost Model\n",
        "catboost_model = cb.CatBoostClassifier(verbose=0, random_state=42)\n",
        "catboost_model.fit(X_train_no_outliers, y_train_no_outliers)\n",
        "y_pred_catboost = catboost_model.predict(X_test)\n",
        "\n",
        "# LightGBM Model\n",
        "lightgbm_model = lgb.LGBMClassifier(random_state=42)\n",
        "lightgbm_model.fit(X_train_no_outliers, y_train_no_outliers)\n",
        "y_pred_lightgbm = lightgbm_model.predict(X_test)\n",
        "\n",
        "# Step 6: Evaluate models and display results\n",
        "\n",
        "# XGBoost Results\n",
        "print(\"XGBoost Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_xgb):.4f}\")\n",
        "print(classification_report(y_test, y_pred_xgb))\n",
        "cm_xgb = confusion_matrix(y_test, y_pred_xgb)\n",
        "sns.heatmap(cm_xgb, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"XGBoost Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n",
        "\n",
        "# CatBoost Results\n",
        "print(\"CatBoost Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_catboost):.4f}\")\n",
        "print(classification_report(y_test, y_pred_catboost))\n",
        "cm_catboost = confusion_matrix(y_test, y_pred_catboost)\n",
        "sns.heatmap(cm_catboost, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"CatBoost Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n",
        "\n",
        "# LightGBM Results\n",
        "print(\"LightGBM Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_lightgbm):.4f}\")\n",
        "print(classification_report(y_test, y_pred_lightgbm))\n",
        "cm_lightgbm = confusion_matrix(y_test, y_pred_lightgbm)\n",
        "sns.heatmap(cm_lightgbm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"LightGBM Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Oq6QUjXd0boj",
        "outputId": "ddfabb39-f6d8-4354-c750-554ac75b6891"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 1006, number of negative: 3248\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006197 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 614\n",
            "[LightGBM] [Info] Number of data points in the train set: 4254, number of used features: 17\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.236483 -> initscore=-1.172057\n",
            "[LightGBM] [Info] Start training from score -1.172057\n",
            "XGBoost Results:\n",
            "Accuracy: 0.7832\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.90      0.86      1033\n",
            "           1       0.62      0.47      0.54       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.72      0.68      0.70      1407\n",
            "weighted avg       0.77      0.78      0.77      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CatBoost Results:\n",
            "Accuracy: 0.7861\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.91      0.86      1033\n",
            "           1       0.64      0.45      0.53       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.68      0.69      1407\n",
            "weighted avg       0.77      0.79      0.77      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LightGBM Results:\n",
            "Accuracy: 0.7754\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.90      0.85      1033\n",
            "           1       0.61      0.44      0.51       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.71      0.67      0.68      1407\n",
            "weighted avg       0.76      0.78      0.76      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from xgboost import XGBClassifier\n",
        "from imblearn.over_sampling import SMOTETomek\n",
        "\n",
        "# Step 1: Upload and Load Dataset\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "file_name = list(uploaded.keys())[0]\n",
        "data = pd.read_excel(file_name)\n",
        "\n",
        "# Step 2: Data Cleaning\n",
        "# Drop missing values\n",
        "data = data.dropna()\n",
        "\n",
        "# Separate features and target variable\n",
        "X = data.drop('Churn', axis=1)\n",
        "y = data['Churn']\n",
        "\n",
        "# Encode categorical features with LabelEncoder to avoid data leakage\n",
        "categorical_columns = X.select_dtypes(include=['object']).columns\n",
        "label_encoders = {}\n",
        "for col in categorical_columns:\n",
        "    le = LabelEncoder()\n",
        "    # Fit and transform on training data, then transform on test data separately later\n",
        "    X[col] = le.fit_transform(X[col])\n",
        "    label_encoders[col] = le\n",
        "\n",
        "# Step 3: Stratified Train-Test Split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.3, random_state=42, stratify=y\n",
        ")\n",
        "\n",
        "# Check class distribution in training set\n",
        "print(\"\\nClass distribution in y_train before SMOTE:\")\n",
        "print(y_train.value_counts())\n",
        "\n",
        "# Step 4: Outlier Removal with IQR (only on training data)\n",
        "numerical_columns = X_train.select_dtypes(include=['float64', 'int64']).columns.drop('Churn')\n",
        "\n",
        "for col in numerical_columns:\n",
        "    Q1 = X_train[col].quantile(0.25)\n",
        "    Q3 = X_train[col].quantile(0.75)\n",
        "    IQR = Q3 - Q1\n",
        "    lower_bound = Q1 - 1.5 * IQR\n",
        "    upper_bound = Q3 + 1.5 * IQR\n",
        "    X_train = X_train[(X_train[col] >= lower_bound) & (X_train[col] <= upper_bound)]\n",
        "    y_train = y_train[X_train.index]  # Keep y aligned with X after removing rows\n",
        "\n",
        "# Step 5: Handle Class Imbalance with SMOTE + Tomek Links\n",
        "smote_tomek = SMOTETomek(random_state=42)\n",
        "X_train_balanced, y_train_balanced = smote_tomek.fit_resample(X_train, y_train)\n",
        "\n",
        "# Calculate class weight for XGBoost\n",
        "class_weight = len(y_train_balanced[y_train_balanced == 0]) / len(y_train_balanced[y_train_balanced == 1])  # Calculate class weight\n",
        "\n",
        "# Step 6: Train XGBoost Model\n",
        "xgb_model = XGBClassifier(\n",
        "    use_label_encoder=False,\n",
        "    eval_metric='logloss',\n",
        "    random_state=42,\n",
        "    scale_pos_weight=class_weight  # Prioritize the Churn class\n",
        ")\n",
        "\n",
        "xgb_model.fit(X_train_balanced, y_train_balanced)\n",
        "\n",
        "# Step 7: Predict with XGBoost\n",
        "y_pred_xgb = xgb_model.predict(X_test)\n",
        "\n",
        "# Step 8: Evaluate XGBoost Model\n",
        "conf_matrix = confusion_matrix(y_test, y_pred_xgb)\n",
        "print(\"\\nConfusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Non-Churn', 'Churn'], yticklabels=['Non-Churn', 'Churn'])\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n",
        "\n",
        "# Classification Report\n",
        "class_report = classification_report(y_test, y_pred_xgb, target_names=['Non-Churn', 'Churn'])\n",
        "print(\"\\nClassification Report:\")\n",
        "print(class_report)\n",
        "\n",
        "# Overall Accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred_xgb)\n",
        "print(f\"\\nOverall Accuracy: {accuracy:.2f}\")\n",
        "\n",
        "# Focus on Churn Class Metrics\n",
        "churn_precision, churn_recall, churn_f1, _ = precision_recall_fscore_support(y_test, y_pred_xgb, average=None)\n",
        "print(f\"\\nChurn Class - Precision: {churn_precision[1]:.2f}, Recall: {churn_recall[1]:.2f}, F1-Score: {churn_f1[1]:.2f}\")\n",
        "\n",
        "# Plot Precision-Recall Curve for XGBoost\n",
        "precision, recall, thresholds = precision_recall_curve(y_test, y_pred_xgb)\n",
        "f1_scores = 2 * (precision * recall) / (precision + recall)\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(recall, precision, marker='.', label='Precision-Recall Curve')\n",
        "plt.title('XGBoost Precision-Recall Curve')\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "v4EHnM1U1azc",
        "outputId": "256690cf-797f-40d6-e519-7189dcba33d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ImportError",
          "evalue": "cannot import name 'SMOTETomek' from 'imblearn.over_sampling' (/usr/local/lib/python3.10/dist-packages/imblearn/over_sampling/__init__.py)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-30-8d312e2d3969>\u001b[0m in \u001b[0;36m<cell line: 11>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mxgboost\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mXGBClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mimblearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mover_sampling\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSMOTETomek\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Step 1: Upload and Load Dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mImportError\u001b[0m: cannot import name 'SMOTETomek' from 'imblearn.over_sampling' (/usr/local/lib/python3.10/dist-packages/imblearn/over_sampling/__init__.py)",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from xgboost import XGBClassifier\n",
        "\n",
        "# Step 1: Upload and Load Dataset\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "file_name = list(uploaded.keys())[0]\n",
        "data = pd.read_excel(file_name)\n",
        "\n",
        "# Step 2: Data Cleaning\n",
        "# Drop missing values\n",
        "data = data.dropna()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "EeEaNoVy6Jkv",
        "outputId": "535ae590-8e2f-4b9d-92fd-6f796888324c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-98c4adeb-da79-48ea-9247-92205f50b8d8\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-98c4adeb-da79-48ea-9247-92205f50b8d8\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving IBM_Telco_dataset.xlsx to IBM_Telco_dataset (6).xlsx\n",
            "Class distribution in the full dataset:\n",
            "Churn\n",
            "0    5163\n",
            "1    1869\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Class distribution in y_train before SMOTE:\n",
            "Churn\n",
            "0    3614\n",
            "1    1308\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [17:48:30] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Confusion Matrix:\n",
            "[[1200  349]\n",
            " [ 178  383]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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lJTAw8ND2SYuLg6FhYXKNlFRUWjYsGGFp2sABhIiIiLxyeSaeVRSbm4ukpKSkJSUBABITU1FUlISbt26hcLCQgwePBi///47IiIiUFxcjLS0NKSlpeHx48cAAFdXV3Tv3h3jxo3D6dOncfLkSQQEBMDX1xf29vYAgGHDhkFfXx9jxozBpUuXsGvXLqxfv77M1JLaj0gbt/1yUStR+biolaisKlnU2nqqRvp59PvaSrU/duwYOnfuXOa4v78/goKCyixGLfXrr7+iU6dOAJ7cGC0gIAAHDhyAXC7HoEGDEBoaChMTE2X78+fPY9KkSThz5gxq1qyJjz/+GLNnz65UrQwkRG8QBhKisqokkLSp3GjB8zw6s0Yj/VRHXNRKREQkNg0tatVm/ISIiIhIchwhISIiEpsIO2S0DQMJERGR2DhloxY/ISIiIpIcR0iIiIjExikbtRhIiIiIxMYpG7X4CREREZHkOEJCREQkNk7ZqMVAQkREJDZO2ajFQEJERCQ2jpCoxchGREREkuMICRERkdg4ZaMWAwkREZHYGEjU4idEREREkuMICRERkdjkXNSqDgMJERGR2DhloxY/ISIiIpIcR0iIiIjExvuQqMVAQkREJDZO2ajFT4iIiIgkxxESIiIisXHKRi0GEiIiIrFxykYtBhIiIiKxcYRELUY2IiIikhxHSIiIiMTGKRu1GEiIiIjExikbtRjZiIiISHIcISEiIhIbp2zUYiAhIiISG6ds1GJkIyIiIslxhISIiEhsnLJRi4GEiIhIbAwkavETIiIiIslxhISIiEhsXNSqFgMJERGR2DhloxYDCRERkdg4QqIWIxsRERFJjiMkREREYuOUjVoMJERERGLjlI1ajGxEREQkOY6QEBERiUzGERK1GEiIiIhExkCiHqdsiIiISHIcISEiIhIbB0jUYiAhIiISGads1OOUDREREUmOIyREREQi4wiJegwkREREImMgUY+BhIiISGQMJOpxDQkRERFJjiMkREREYuMAiVoMJERERCLjlI161SKQ5OXlYfny5YiOjkZGRgZKSkpUzl+/fl2iyoiIiKgqVItAMnbsWMTGxmL48OGws7NjkiQiIq3C32vqVYtAcvjwYfz000/w8vKSuhQiIiKNYyBRr1rssrG0tISVlZXUZRAREZFEqkUgWbx4MebPn4+HDx9KXQoREZHGyWQy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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "   Non-Churn       0.87      0.77      0.82      1549\n",
            "       Churn       0.52      0.68      0.59       561\n",
            "\n",
            "    accuracy                           0.75      2110\n",
            "   macro avg       0.70      0.73      0.71      2110\n",
            "weighted avg       0.78      0.75      0.76      2110\n",
            "\n",
            "\n",
            "Overall Accuracy: 0.75\n",
            "\n",
            "Churn Class - Precision: 0.52, Recall: 0.68, F1-Score: 0.59\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Encode categorical features\n",
        "categorical_columns = data.select_dtypes(include=['object']).columns\n",
        "label_encoders = {}\n",
        "for col in categorical_columns:\n",
        "    le = LabelEncoder()\n",
        "    data[col] = le.fit_transform(data[col])\n",
        "    label_encoders[col] = le\n",
        "\n",
        "# Separate features and target variable\n",
        "X = data.drop('Churn', axis=1)\n",
        "y = data['Churn']\n",
        "\n",
        "# Confirm class distribution in full dataset\n",
        "print(\"Class distribution in the full dataset:\")\n",
        "print(y.value_counts())\n",
        "\n",
        "# Step 3: Stratified Train-Test Split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.3, random_state=42, stratify=y\n",
        ")\n",
        "\n",
        "# Check class distribution in training set\n",
        "print(\"\\nClass distribution in y_train before SMOTE:\")\n",
        "print(y_train.value_counts())\n",
        "\n",
        "# Step 4: Handle Class Imbalance with SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)\n",
        "\n",
        "# Calculate class weight for XGBoost\n",
        "class_weight = len(y_train[y_train == 0]) / len(y_train[y_train == 1])  # Calculate class weight\n",
        "\n",
        "# Initialize XGBoost model\n",
        "xgb_model = XGBClassifier(\n",
        "    use_label_encoder=False,\n",
        "    eval_metric='logloss',\n",
        "    random_state=42,\n",
        "    #scale_pos_weight=class_weight  # Prioritize the Churn class\n",
        ")\n",
        "\n",
        "# Train the XGBoost model\n",
        "xgb_model.fit(X_train_balanced, y_train_balanced)\n",
        "\n",
        "# Step 5: Make Predictions on Test Data\n",
        "xgb_predictions = xgb_model.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Step 6: Evaluate Model\n",
        "# Confusion Matrix\n",
        "conf_matrix = confusion_matrix(y_test, (xgb_predictions >= 0.5).astype(int))\n",
        "print(\"\\nConfusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Non-Churn', 'Churn'], yticklabels=['Non-Churn', 'Churn'])\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n",
        "\n",
        "# Classification Report\n",
        "class_report = classification_report(y_test, (xgb_predictions >= 0.5).astype(int), target_names=['Non-Churn', 'Churn'])\n",
        "print(\"\\nClassification Report:\")\n",
        "print(class_report)\n",
        "\n",
        "# Overall Accuracy\n",
        "accuracy = accuracy_score(y_test, (xgb_predictions >= 0.5).astype(int))\n",
        "print(f\"\\nOverall Accuracy: {accuracy:.2f}\")\n",
        "\n",
        "# Focus on Churn Class Metrics\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "churn_precision, churn_recall, churn_f1, _ = precision_recall_fscore_support(y_test, (xgb_predictions >= 0.5).astype(int), average=None)\n",
        "print(f\"\\nChurn Class - Precision: {churn_precision[1]:.2f}, Recall: {churn_recall[1]:.2f}, F1-Score: {churn_f1[1]:.2f}\")\n",
        "\n",
        "# Plot Precision-Recall Curve for XGBoost\n",
        "from sklearn.metrics import precision_recall_curve\n",
        "precision, recall, thresholds = precision_recall_curve(y_test, xgb_predictions)\n",
        "f1_scores = 2 * (precision * recall) / (precision + recall)\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(recall, precision, marker='.', label='Precision-Recall Curve')\n",
        "plt.title('XGBoost Precision-Recall Curve')\n",
        "plt.xlabel('Recall')\n",
        "plt.ylabel('Precision')\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "5gEbaLGr6ToA",
        "outputId": "bebc9a0a-4f68-46cd-9641-e6b74a49f892"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class distribution in the full dataset:\n",
            "Churn\n",
            "0    5163\n",
            "1    1869\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Class distribution in y_train before SMOTE:\n",
            "Churn\n",
            "0    3614\n",
            "1    1308\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [17:51:08] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Confusion Matrix:\n",
            "[[1307  242]\n",
            " [ 246  315]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "   Non-Churn       0.84      0.84      0.84      1549\n",
            "       Churn       0.57      0.56      0.56       561\n",
            "\n",
            "    accuracy                           0.77      2110\n",
            "   macro avg       0.70      0.70      0.70      2110\n",
            "weighted avg       0.77      0.77      0.77      2110\n",
            "\n",
            "\n",
            "Overall Accuracy: 0.77\n",
            "\n",
            "Churn Class - Precision: 0.57, Recall: 0.56, F1-Score: 0.56\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "\n",
        "# Let's analyze outliers in numerical features\n",
        "numerical_columns = data.select_dtypes(include=['float64', 'int64']).columns\n",
        "\n",
        "# 1. Z-Score Outlier Detection\n",
        "z_scores = np.abs(stats.zscore(data[numerical_columns]))  # Calculate z-scores\n",
        "z_outliers = (z_scores > 3).any(axis=1)  # Threshold for outliers (z > 3)\n",
        "\n",
        "# 2. IQR Outlier Detection\n",
        "Q1 = data[numerical_columns].quantile(0.25)\n",
        "Q3 = data[numerical_columns].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "iqr_outliers = ((data[numerical_columns] < (Q1 - 1.5 * IQR)) | (data[numerical_columns] > (Q3 + 1.5 * IQR)))\n",
        "\n",
        "# Summary of outliers detected\n",
        "outliers_zscore = data[z_outliers]\n",
        "outliers_iqr = data[iqr_outliers.any(axis=1)]\n",
        "\n",
        "# Visualize outliers (Boxplot)\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.boxplot(data=data[numerical_columns])\n",
        "plt.title('Boxplot of Numerical Features')\n",
        "plt.show()\n",
        "\n",
        "# Return outliers to inspect\n",
        "outliers_zscore, outliers_iqr\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "RSBhPcadC2_D",
        "outputId": "dec34651-2930-43b3-dcf5-c26c2c577d20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(      customerID  gender  SeniorCitizen  Partner  Dependents  tenure  \\\n",
              " 0           5365       0              0        1           0       1   \n",
              " 3           5524       1              0        0           0      45   \n",
              " 7           4760       0              0        0           0      10   \n",
              " 20          6196       1              1        0           0       1   \n",
              " 27          6108       1              0        1           1       1   \n",
              " ...          ...     ...            ...      ...         ...     ...   \n",
              " 7003        3128       1              0        0           0      26   \n",
              " 7007        1562       1              1        1           0      72   \n",
              " 7029        1525       0              1        0           0       6   \n",
              " 7036        5493       0              0        0           0      12   \n",
              " 7040        3358       0              0        1           1      11   \n",
              " \n",
              "       PhoneService  MultipleLines  InternetService  OnlineSecurity  ...  \\\n",
              " 0                0              1                0               0  ...   \n",
              " 3                0              1                0               2  ...   \n",
              " 7                0              1                0               2  ...   \n",
              " 20               0              1                0               0  ...   \n",
              " 27               0              1                0               0  ...   \n",
              " ...            ...            ...              ...             ...  ...   \n",
              " 7003             0              1                0               0  ...   \n",
              " 7007             0              1                0               2  ...   \n",
              " 7029             0              1                0               0  ...   \n",
              " 7036             0              1                0               0  ...   \n",
              " 7040             0              1                0               2  ...   \n",
              " \n",
              "       DeviceProtection  TechSupport  StreamingTV  StreamingMovies  Contract  \\\n",
              " 0                    0            0            0                0         0   \n",
              " 3                    2            2            0                0         1   \n",
              " 7                    0            0            0                0         0   \n",
              " 20                   2            0            0                2         0   \n",
              " 27                   0            0            0                0         0   \n",
              " ...                ...          ...          ...              ...       ...   \n",
              " 7003                 2            2            0                0         0   \n",
              " 7007                 2            2            2                2         2   \n",
              " 7029                 0            0            2                2         0   \n",
              " 7036                 2            2            2                2         1   \n",
              " 7040                 0            0            0                0         0   \n",
              " \n",
              "       PaperlessBilling  PaymentMethod  MonthlyCharges  TotalCharges  Churn  \n",
              " 0                    1              2           29.85         29.85      0  \n",
              " 3                    0              0           42.30       1840.75      0  \n",
              " 7                    0              3           29.75        301.90      0  \n",
              " 20                   1              2           39.65         39.65      1  \n",
              " 27                   0              2           30.20         30.20      1  \n",
              " ...                ...            ...             ...           ...    ...  \n",
              " 7003                 0              2           35.75       1022.50      0  \n",
              " 7007                 1              0           63.10       4685.55      0  \n",
              " 7029                 1              2           44.40        263.05      0  \n",
              " 7036                 0              2           60.65        743.30      0  \n",
              " 7040                 1              2           29.60        346.45      0  \n",
              " \n",
              " [680 rows x 21 columns],\n",
              "       customerID  gender  SeniorCitizen  Partner  Dependents  tenure  \\\n",
              " 0           5365       0              0        1           0       1   \n",
              " 3           5524       1              0        0           0      45   \n",
              " 7           4760       0              0        0           0      10   \n",
              " 20          6196       1              1        0           0       1   \n",
              " 27          6108       1              0        1           1       1   \n",
              " ...          ...     ...            ...      ...         ...     ...   \n",
              " 7031        2515       1              1        1           0      55   \n",
              " 7032        4883       1              1        0           0       1   \n",
              " 7036        5493       0              0        0           0      12   \n",
              " 7040        3358       0              0        1           1      11   \n",
              " 7041        5923       1              1        1           0       4   \n",
              " \n",
              "       PhoneService  MultipleLines  InternetService  OnlineSecurity  ...  \\\n",
              " 0                0              1                0               0  ...   \n",
              " 3                0              1                0               2  ...   \n",
              " 7                0              1                0               2  ...   \n",
              " 20               0              1                0               0  ...   \n",
              " 27               0              1                0               0  ...   \n",
              " ...            ...            ...              ...             ...  ...   \n",
              " 7031             1              2                0               2  ...   \n",
              " 7032             1              2                1               0  ...   \n",
              " 7036             0              1                0               0  ...   \n",
              " 7040             0              1                0               2  ...   \n",
              " 7041             1              2                1               0  ...   \n",
              " \n",
              "       DeviceProtection  TechSupport  StreamingTV  StreamingMovies  Contract  \\\n",
              " 0                    0            0            0                0         0   \n",
              " 3                    2            2            0                0         1   \n",
              " 7                    0            0            0                0         0   \n",
              " 20                   2            0            0                2         0   \n",
              " 27                   0            0            0                0         0   \n",
              " ...                ...          ...          ...              ...       ...   \n",
              " 7031                 0            0            0                0         1   \n",
              " 7032                 0            0            0                0         0   \n",
              " 7036                 2            2            2                2         1   \n",
              " 7040                 0            0            0                0         0   \n",
              " 7041                 0            0            0                0         0   \n",
              " \n",
              "       PaperlessBilling  PaymentMethod  MonthlyCharges  TotalCharges  Churn  \n",
              " 0                    1              2           29.85         29.85      0  \n",
              " 3                    0              0           42.30       1840.75      0  \n",
              " 7                    0              3           29.75        301.90      0  \n",
              " 20                   1              2           39.65         39.65      1  \n",
              " 27                   0              2           30.20         30.20      1  \n",
              " ...                ...            ...             ...           ...    ...  \n",
              " 7031                 0              1           60.00       3316.10      0  \n",
              " 7032                 1              2           75.75         75.75      1  \n",
              " 7036                 0              2           60.65        743.30      0  \n",
              " 7040                 1              2           29.60        346.45      0  \n",
              " 7041                 1              3           74.40        306.60      1  \n",
              " \n",
              " [1718 rows x 21 columns])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "\n",
        "# Select only numeric columns to check for outliers\n",
        "numerical_columns = data.select_dtypes(include=['float64', 'int64']).columns\n",
        "\n",
        "# Z-Score Method to identify outliers\n",
        "z_scores = np.abs(stats.zscore(data[numerical_columns]))  # Calculate z-scores\n",
        "z_outliers = (z_scores > 3)  # True for outliers (z > 3)\n",
        "\n",
        "# IQR Method to identify outliers\n",
        "Q1 = data[numerical_columns].quantile(0.25)\n",
        "Q3 = data[numerical_columns].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "iqr_outliers = (data[numerical_columns] < (Q1 - 1.5 * IQR)) | (data[numerical_columns] > (Q3 + 1.5 * IQR))\n",
        "\n",
        "# Combine the outliers from both methods to get a comprehensive view\n",
        "outliers_zscore = data[z_outliers.any(axis=1)]\n",
        "outliers_iqr = data[iqr_outliers.any(axis=1)]\n",
        "\n",
        "# Inspect the outliers\n",
        "outliers_zscore, outliers_iqr\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lgj8yAwvED8a",
        "outputId": "4a3e723a-c15e-4db1-a472-5e3ad0879951"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(      customerID  gender  SeniorCitizen  Partner  Dependents  tenure  \\\n",
              " 0           5365       0              0        1           0       1   \n",
              " 3           5524       1              0        0           0      45   \n",
              " 7           4760       0              0        0           0      10   \n",
              " 20          6196       1              1        0           0       1   \n",
              " 27          6108       1              0        1           1       1   \n",
              " ...          ...     ...            ...      ...         ...     ...   \n",
              " 7003        3128       1              0        0           0      26   \n",
              " 7007        1562       1              1        1           0      72   \n",
              " 7029        1525       0              1        0           0       6   \n",
              " 7036        5493       0              0        0           0      12   \n",
              " 7040        3358       0              0        1           1      11   \n",
              " \n",
              "       PhoneService  MultipleLines  InternetService  OnlineSecurity  ...  \\\n",
              " 0                0              1                0               0  ...   \n",
              " 3                0              1                0               2  ...   \n",
              " 7                0              1                0               2  ...   \n",
              " 20               0              1                0               0  ...   \n",
              " 27               0              1                0               0  ...   \n",
              " ...            ...            ...              ...             ...  ...   \n",
              " 7003             0              1                0               0  ...   \n",
              " 7007             0              1                0               2  ...   \n",
              " 7029             0              1                0               0  ...   \n",
              " 7036             0              1                0               0  ...   \n",
              " 7040             0              1                0               2  ...   \n",
              " \n",
              "       DeviceProtection  TechSupport  StreamingTV  StreamingMovies  Contract  \\\n",
              " 0                    0            0            0                0         0   \n",
              " 3                    2            2            0                0         1   \n",
              " 7                    0            0            0                0         0   \n",
              " 20                   2            0            0                2         0   \n",
              " 27                   0            0            0                0         0   \n",
              " ...                ...          ...          ...              ...       ...   \n",
              " 7003                 2            2            0                0         0   \n",
              " 7007                 2            2            2                2         2   \n",
              " 7029                 0            0            2                2         0   \n",
              " 7036                 2            2            2                2         1   \n",
              " 7040                 0            0            0                0         0   \n",
              " \n",
              "       PaperlessBilling  PaymentMethod  MonthlyCharges  TotalCharges  Churn  \n",
              " 0                    1              2           29.85         29.85      0  \n",
              " 3                    0              0           42.30       1840.75      0  \n",
              " 7                    0              3           29.75        301.90      0  \n",
              " 20                   1              2           39.65         39.65      1  \n",
              " 27                   0              2           30.20         30.20      1  \n",
              " ...                ...            ...             ...           ...    ...  \n",
              " 7003                 0              2           35.75       1022.50      0  \n",
              " 7007                 1              0           63.10       4685.55      0  \n",
              " 7029                 1              2           44.40        263.05      0  \n",
              " 7036                 0              2           60.65        743.30      0  \n",
              " 7040                 1              2           29.60        346.45      0  \n",
              " \n",
              " [680 rows x 21 columns],\n",
              "       customerID  gender  SeniorCitizen  Partner  Dependents  tenure  \\\n",
              " 0           5365       0              0        1           0       1   \n",
              " 3           5524       1              0        0           0      45   \n",
              " 7           4760       0              0        0           0      10   \n",
              " 20          6196       1              1        0           0       1   \n",
              " 27          6108       1              0        1           1       1   \n",
              " ...          ...     ...            ...      ...         ...     ...   \n",
              " 7031        2515       1              1        1           0      55   \n",
              " 7032        4883       1              1        0           0       1   \n",
              " 7036        5493       0              0        0           0      12   \n",
              " 7040        3358       0              0        1           1      11   \n",
              " 7041        5923       1              1        1           0       4   \n",
              " \n",
              "       PhoneService  MultipleLines  InternetService  OnlineSecurity  ...  \\\n",
              " 0                0              1                0               0  ...   \n",
              " 3                0              1                0               2  ...   \n",
              " 7                0              1                0               2  ...   \n",
              " 20               0              1                0               0  ...   \n",
              " 27               0              1                0               0  ...   \n",
              " ...            ...            ...              ...             ...  ...   \n",
              " 7031             1              2                0               2  ...   \n",
              " 7032             1              2                1               0  ...   \n",
              " 7036             0              1                0               0  ...   \n",
              " 7040             0              1                0               2  ...   \n",
              " 7041             1              2                1               0  ...   \n",
              " \n",
              "       DeviceProtection  TechSupport  StreamingTV  StreamingMovies  Contract  \\\n",
              " 0                    0            0            0                0         0   \n",
              " 3                    2            2            0                0         1   \n",
              " 7                    0            0            0                0         0   \n",
              " 20                   2            0            0                2         0   \n",
              " 27                   0            0            0                0         0   \n",
              " ...                ...          ...          ...              ...       ...   \n",
              " 7031                 0            0            0                0         1   \n",
              " 7032                 0            0            0                0         0   \n",
              " 7036                 2            2            2                2         1   \n",
              " 7040                 0            0            0                0         0   \n",
              " 7041                 0            0            0                0         0   \n",
              " \n",
              "       PaperlessBilling  PaymentMethod  MonthlyCharges  TotalCharges  Churn  \n",
              " 0                    1              2           29.85         29.85      0  \n",
              " 3                    0              0           42.30       1840.75      0  \n",
              " 7                    0              3           29.75        301.90      0  \n",
              " 20                   1              2           39.65         39.65      1  \n",
              " 27                   0              2           30.20         30.20      1  \n",
              " ...                ...            ...             ...           ...    ...  \n",
              " 7031                 0              1           60.00       3316.10      0  \n",
              " 7032                 1              2           75.75         75.75      1  \n",
              " 7036                 0              2           60.65        743.30      0  \n",
              " 7040                 1              2           29.60        346.45      0  \n",
              " 7041                 1              3           74.40        306.60      1  \n",
              " \n",
              " [1718 rows x 21 columns])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import xgboost as xgb\n",
        "import catboost as cb\n",
        "import lightgbm as lgb\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "\n",
        "# Step 1: Split the data into features and target\n",
        "target_column = 'Churn'  # Assume target column is named 'Churn'\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "# Step 2: Label Encoding for categorical columns\n",
        "categorical_columns = X.select_dtypes(include=['object']).columns\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "for col in categorical_columns:\n",
        "    X[col] = label_encoder.fit_transform(X[col])\n",
        "\n",
        "# Step 3: Split the dataset into training (80%) and testing (20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 4: Handle class imbalance using SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
        "\n",
        "# Step 5: Train XGBoost, CatBoost, and LightGBM models using default parameters and class weights\n",
        "\n",
        "# XGBoost Model with class weight adjustment for imbalance\n",
        "xgb_model = xgb.XGBClassifier(random_state=42, scale_pos_weight=(y_train == 0).sum() / (y_train == 1).sum())\n",
        "xgb_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_xgb = xgb_model.predict(X_test)\n",
        "\n",
        "# CatBoost Model (CatBoost automatically handles class imbalance)\n",
        "catboost_model = cb.CatBoostClassifier(verbose=0, random_state=42)\n",
        "catboost_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_catboost = catboost_model.predict(X_test)\n",
        "\n",
        "# LightGBM Model with class weight adjustment for imbalance\n",
        "lightgbm_model = lgb.LGBMClassifier(random_state=42, class_weight='balanced')\n",
        "lightgbm_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_lightgbm = lightgbm_model.predict(X_test)\n",
        "\n",
        "# Step 6: Evaluate models and display results\n",
        "\n",
        "# XGBoost Results\n",
        "print(\"XGBoost Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_xgb):.4f}\")\n",
        "print(classification_report(y_test, y_pred_xgb))\n",
        "cm_xgb = confusion_matrix(y_test, y_pred_xgb)\n",
        "sns.heatmap(cm_xgb, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"XGBoost Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n",
        "\n",
        "# CatBoost Results\n",
        "print(\"CatBoost Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_catboost):.4f}\")\n",
        "print(classification_report(y_test, y_pred_catboost))\n",
        "cm_catboost = confusion_matrix(y_test, y_pred_catboost)\n",
        "sns.heatmap(cm_catboost, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"CatBoost Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n",
        "\n",
        "# LightGBM Results\n",
        "print(\"LightGBM Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_lightgbm):.4f}\")\n",
        "print(classification_report(y_test, y_pred_lightgbm))\n",
        "cm_lightgbm = confusion_matrix(y_test, y_pred_lightgbm)\n",
        "sns.heatmap(cm_lightgbm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"LightGBM Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "N-BX1dmvEtFQ",
        "outputId": "eac251a0-f563-4af7-dfc4-9d808e829d01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/dask/dataframe/__init__.py:42: FutureWarning: \n",
            "Dask dataframe query planning is disabled because dask-expr is not installed.\n",
            "\n",
            "You can install it with `pip install dask[dataframe]` or `conda install dask`.\n",
            "This will raise in a future version.\n",
            "\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'df' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-ddd12b71830c>\u001b[0m in \u001b[0;36m<cell line: 16>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mtarget_column\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Churn'\u001b[0m  \u001b[0;31m# Assume target column is named 'Churn'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtarget_column\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtarget_column\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import pandas as pd\n",
        "\n",
        "# Upload the file\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Load the dataset into a pandas DataFrame (assuming the file is CSV)\n",
        "filename = next(iter(uploaded))  # Get the uploaded file name\n",
        "df = pd.read_excel(filename)\n",
        "\n",
        "# Display the first few rows of the dataset to ensure it is loaded correctly\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "jRS4gW2kF4Qn",
        "outputId": "896beb88-f68e-40d1-bdd6-345033ad2f7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-c450b6af-c50b-4037-940e-2584b0592115\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-c450b6af-c50b-4037-940e-2584b0592115\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving IBM_Telco_dataset - Copy.xlsx to IBM_Telco_dataset - Copy (8).xlsx\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   gender  SeniorCitizen  Partner  Dependents  tenure  PhoneService  \\\n",
              "0       0              0        1           0       1             0   \n",
              "1       1              0        0           0      34             1   \n",
              "2       1              0        0           0       2             1   \n",
              "3       1              0        0           0      45             0   \n",
              "4       0              0        0           0       2             1   \n",
              "\n",
              "   MultipleLines  InternetService  OnlineSecurity  OnlineBackup  \\\n",
              "0              0                0               0             1   \n",
              "1              0                0               1             0   \n",
              "2              0                0               1             1   \n",
              "3              0                0               1             0   \n",
              "4              0                1               0             0   \n",
              "\n",
              "   DeviceProtection  TechSupport  StreamingTV  StreamingMovies  \\\n",
              "0                 0            0            0                0   \n",
              "1                 1            0            0                0   \n",
              "2                 0            0            0                0   \n",
              "3                 1            1            0                0   \n",
              "4                 0            0            0                0   \n",
              "\n",
              "         Contract  PaperlessBilling              PaymentMethod  \\\n",
              "0  Month-to-month                 1           Electronic check   \n",
              "1        One year                 0               Mailed check   \n",
              "2  Month-to-month                 1               Mailed check   \n",
              "3        One year                 0  Bank transfer (automatic)   \n",
              "4  Month-to-month                 1           Electronic check   \n",
              "\n",
              "   MonthlyCharges  TotalCharges  Churn  \n",
              "0           29.85         29.85      0  \n",
              "1           56.95       1889.50      0  \n",
              "2           53.85        108.15      1  \n",
              "3           42.30       1840.75      0  \n",
              "4           70.70        151.65      1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-347d9057-0efb-45e4-a8ff-e72d296a7441\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>Partner</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>tenure</th>\n",
              "      <th>PhoneService</th>\n",
              "      <th>MultipleLines</th>\n",
              "      <th>InternetService</th>\n",
              "      <th>OnlineSecurity</th>\n",
              "      <th>OnlineBackup</th>\n",
              "      <th>DeviceProtection</th>\n",
              "      <th>TechSupport</th>\n",
              "      <th>StreamingTV</th>\n",
              "      <th>StreamingMovies</th>\n",
              "      <th>Contract</th>\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>1</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>One year</td>\n",
              "      <td>0</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>1</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>53.85</td>\n",
              "      <td>108.15</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>One year</td>\n",
              "      <td>0</td>\n",
              "      <td>Bank transfer (automatic)</td>\n",
              "      <td>42.30</td>\n",
              "      <td>1840.75</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>1</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>70.70</td>\n",
              "      <td>151.65</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-347d9057-0efb-45e4-a8ff-e72d296a7441')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-347d9057-0efb-45e4-a8ff-e72d296a7441 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-347d9057-0efb-45e4-a8ff-e72d296a7441');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-805c2350-ce97-4381-be82-723f661db670\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-805c2350-ce97-4381-be82-723f661db670')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-805c2350-ce97-4381-be82-723f661db670 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 7043,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SeniorCitizen\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Partner\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dependents\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 72,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          8,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PhoneService\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MultipleLines\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InternetService\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OnlineSecurity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OnlineBackup\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DeviceProtection\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TechSupport\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StreamingTV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StreamingMovies\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Contract\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Month-to-month\",\n          \"One year\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PaperlessBilling\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PaymentMethod\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Mailed check\",\n          \"Credit card (automatic)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyCharges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.09004709767854,\n        \"min\": 18.25,\n        \"max\": 118.75,\n        \"num_unique_values\": 1585,\n        \"samples\": [\n          48.85,\n          20.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TotalCharges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2266.7713618831453,\n        \"min\": 18.8,\n        \"max\": 8684.8,\n        \"num_unique_values\": 6530,\n        \"samples\": [\n          5594.0,\n          6840.95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Churn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import xgboost as xgb\n",
        "import catboost as cb\n",
        "import lightgbm as lgb\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "\n",
        "df = df.dropna()\n",
        "# Step 1: Split the data into features and target\n",
        "target_column = 'Churn'  # Assume target column is named 'Churn'\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "# Step 2: Label Encoding for categorical columns\n",
        "categorical_columns = X.select_dtypes(include=['object']).columns\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "for col in categorical_columns:\n",
        "    X[col] = label_encoder.fit_transform(X[col])\n",
        "\n",
        "# Step 3: Split the dataset into training (80%) and testing (20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 4: Handle class imbalance using SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
        "\n",
        "# Step 5: Train XGBoost, CatBoost, and LightGBM models using default parameters and class weights\n",
        "\n",
        "# XGBoost Model with class weight adjustment for imbalance\n",
        "xgb_model = xgb.XGBClassifier(random_state=42)\n",
        "xgb_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_xgb = xgb_model.predict(X_test)\n",
        "\n",
        "# CatBoost Model (CatBoost automatically handles class imbalance)\n",
        "catboost_model = cb.CatBoostClassifier(verbose=0, random_state=42)\n",
        "catboost_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_catboost = catboost_model.predict(X_test)\n",
        "\n",
        "# LightGBM Model with class weight adjustment for imbalance\n",
        "lightgbm_model = lgb.LGBMClassifier(random_state=42, class_weight='balanced')\n",
        "lightgbm_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_lightgbm = lightgbm_model.predict(X_test)\n",
        "\n",
        "# Step 6: Evaluate models and display results\n",
        "\n",
        "# XGBoost Results\n",
        "print(\"XGBoost Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_xgb):.4f}\")\n",
        "print(classification_report(y_test, y_pred_xgb))\n",
        "cm_xgb = confusion_matrix(y_test, y_pred_xgb)\n",
        "sns.heatmap(cm_xgb, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"XGBoost Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n",
        "\n",
        "# CatBoost Results\n",
        "print(\"CatBoost Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_catboost):.4f}\")\n",
        "print(classification_report(y_test, y_pred_catboost))\n",
        "cm_catboost = confusion_matrix(y_test, y_pred_catboost)\n",
        "sns.heatmap(cm_catboost, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"CatBoost Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n",
        "\n",
        "# LightGBM Results\n",
        "print(\"LightGBM Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_lightgbm):.4f}\")\n",
        "print(classification_report(y_test, y_pred_lightgbm))\n",
        "cm_lightgbm = confusion_matrix(y_test, y_pred_lightgbm)\n",
        "sns.heatmap(cm_lightgbm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"LightGBM Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "g7rCphsuGDIy",
        "outputId": "e9db4980-74bb-4b73-b844-214daa582d8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 4130, number of negative: 4130\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002334 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 8260, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
            "XGBoost Results:\n",
            "Accuracy: 0.7591\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.83      0.83      1033\n",
            "           1       0.54      0.57      0.56       374\n",
            "\n",
            "    accuracy                           0.76      1407\n",
            "   macro avg       0.69      0.70      0.70      1407\n",
            "weighted avg       0.76      0.76      0.76      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CatBoost Results:\n",
            "Accuracy: 0.7612\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.82      0.83      1033\n",
            "           1       0.55      0.61      0.57       374\n",
            "\n",
            "    accuracy                           0.76      1407\n",
            "   macro avg       0.70      0.71      0.70      1407\n",
            "weighted avg       0.77      0.76      0.77      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LightGBM Results:\n",
            "Accuracy: 0.7612\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.81      0.83      1033\n",
            "           1       0.54      0.62      0.58       374\n",
            "\n",
            "    accuracy                           0.76      1407\n",
            "   macro avg       0.70      0.72      0.71      1407\n",
            "weighted avg       0.77      0.76      0.77      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import StackingClassifier\n",
        "from sklearn.base import BaseEstimator, ClassifierMixin\n",
        "import xgboost as xgb\n",
        "import catboost as cb\n",
        "import lightgbm as lgb\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Custom wrapper to make XGBClassifier compatible with StackingClassifier\n",
        "class XGBWrapper(BaseEstimator, ClassifierMixin):\n",
        "    def __init__(self, **kwargs):\n",
        "        self.model = xgb.XGBClassifier(**kwargs)\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        self.model.fit(X, y)\n",
        "        self.classes_ = self.model.classes_  # Add this line to set the classes_ attribute\n",
        "        return self\n",
        "\n",
        "    def predict(self, X):\n",
        "        return self.model.predict(X)\n",
        "\n",
        "    def predict_proba(self, X):\n",
        "        return self.model.predict_proba(X)\n",
        "\n",
        "\n",
        "# Step 1: Split the data into features and target\n",
        "target_column = 'Churn'  # Assume target column is named 'Churn'\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "# Step 2: Label Encoding for categorical columns\n",
        "categorical_columns = X.select_dtypes(include=['object']).columns\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "for col in categorical_columns:\n",
        "    X[col] = label_encoder.fit_transform(X[col])\n",
        "\n",
        "# Step 3: Split the dataset into training (80%) and testing (20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 4: Define base models and meta-learner (Logistic Regression)\n",
        "\n",
        "# Define base learners\n",
        "base_learners = [\n",
        "    ('xgb', XGBWrapper(random_state=42)),\n",
        "    ('catboost', cb.CatBoostClassifier(verbose=0, random_state=42)),\n",
        "    ('lightgbm', lgb.LGBMClassifier(random_state=42))\n",
        "]\n",
        "\n",
        "# Meta-learner (Logistic Regression)\n",
        "meta_learner = LogisticRegression(random_state=42)\n",
        "\n",
        "# Stacking Classifier\n",
        "stacking_model = StackingClassifier(estimators=base_learners, final_estimator=meta_learner, cv=5)\n",
        "\n",
        "# Step 5: Train the stacking model\n",
        "stacking_model.fit(X_train, y_train)\n",
        "\n",
        "# Step 6: Make predictions and evaluate the model\n",
        "y_pred_stacking = stacking_model.predict(X_test)\n",
        "\n",
        "# Step 7: Evaluate the stacking model\n",
        "print(\"Stacking Model Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_stacking):.4f}\")\n",
        "print(classification_report(y_test, y_pred_stacking))\n",
        "cm_stacking = confusion_matrix(y_test, y_pred_stacking)\n",
        "sns.heatmap(cm_stacking, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"Stacking Model Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "BNzXxLAmGXMD",
        "outputId": "ff65695b-8084-4726-d4c0-cc1fe8c282bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 1495, number of negative: 4130\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001465 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 5625, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The LGBMClassifier or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The LGBMClassifier or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The LGBMClassifier or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 1196, number of negative: 3304\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001156 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 4500, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n",
            "[LightGBM] [Info] Number of positive: 1196, number of negative: 3304\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001102 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 4500, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The LGBMClassifier or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The LGBMClassifier or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 1196, number of negative: 3304\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001155 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 4500, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n",
            "[LightGBM] [Info] Number of positive: 1196, number of negative: 3304\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001083 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 4500, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The LGBMClassifier or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 1196, number of negative: 3304\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001153 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 4500, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n",
            "Stacking Model Results:\n",
            "Accuracy: 0.7896\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.91      0.86      1033\n",
            "           1       0.65      0.46      0.54       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.69      0.70      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC\n",
        "import xgboost as xgb\n",
        "import catboost as cb\n",
        "import lightgbm as lgb\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "\n",
        "# Step 1: Initialize the models\n",
        "lr_model = LogisticRegression(random_state=42)\n",
        "rf_model = RandomForestClassifier(random_state=42)\n",
        "xgb_model = xgb.XGBClassifier(random_state=42)\n",
        "catboost_model = cb.CatBoostClassifier(verbose=0, random_state=42)\n",
        "lightgbm_model = lgb.LGBMClassifier(random_state=42)\n",
        "dt_model = DecisionTreeClassifier(random_state=42)\n",
        "svm_model = SVC(probability=True, random_state=42)\n",
        "\n",
        "# Step 2: Train each model\n",
        "models = [lr_model, rf_model, xgb_model, catboost_model, lightgbm_model, dt_model, svm_model]\n",
        "\n",
        "for model in models:\n",
        "    model.fit(X_train, y_train)\n",
        "\n",
        "# Step 3: Get predictions from each model\n",
        "predictions = [model.predict(X_test) for model in models]\n",
        "\n",
        "# Step 4: Ensemble logic - predict \"churn\" if any model predicts churn (1)\n",
        "ensemble_predictions = (sum(predictions) > 0).astype(int)  # At least one 1 means \"churn\"\n",
        "\n",
        "# Step 5: Evaluate the ensemble model\n",
        "print(\"Ensemble Model Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, ensemble_predictions):.4f}\")\n",
        "print(classification_report(y_test, ensemble_predictions))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "33jVNDNIG7Cs",
        "outputId": "c92e294b-0012-4b7d-ed1d-198a877f8a5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 1495, number of negative: 4130\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001396 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 5625, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n",
            "Ensemble Model Results:\n",
            "Accuracy: 0.7072\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.70      0.78      1033\n",
            "           1       0.47      0.73      0.57       374\n",
            "\n",
            "    accuracy                           0.71      1407\n",
            "   macro avg       0.67      0.71      0.67      1407\n",
            "weighted avg       0.77      0.71      0.72      1407\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install xgboost catboost lightgbm scikit-learn imbalanced-learn\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ny3uqSk_JH1C",
        "outputId": "ddd50b79-d183-4b4c-85a4-0b0670230419"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.1.3)\n",
            "Requirement already satisfied: catboost in /usr/local/lib/python3.10/dist-packages (1.2.7)\n",
            "Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (4.5.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.6.0)\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (0.12.4)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.26.4)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/dist-packages (from xgboost) (2.23.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.13.1)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.8.0)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.2.2)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.24.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.17.0)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.55.3)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (11.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.2.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (9.0.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "import xgboost as xgb\n",
        "import catboost as cb\n",
        "import lightgbm as lgb\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "# Assuming df is already defined and preprocessed\n",
        "df = df.dropna()\n",
        "\n",
        "# Step 1: Split the data into features and target\n",
        "target_column = 'Churn'  # Assume target column is named 'Churn'\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "# Step 2: Label Encoding for categorical columns\n",
        "categorical_columns = X.select_dtypes(include=['object']).columns\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "for col in categorical_columns:\n",
        "    X[col] = label_encoder.fit_transform(X[col])\n",
        "\n",
        "# Step 3: Split the dataset into training (80%) and testing (20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 4: Handle class imbalance using SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
        "\n",
        "# Step 5: Train XGBoost with manually tuned hyperparameters\n",
        "\n",
        "xgb_model = xgb.XGBClassifier(\n",
        "    n_estimators=200,            # Manually set hyperparameters\n",
        "    learning_rate=0.1,           # You can adjust the values here\n",
        "    max_depth=5,\n",
        "    subsample=0.8,\n",
        "    colsample_bytree=0.8,\n",
        "    random_state=42\n",
        ")\n",
        "\n",
        "xgb_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_xgb = xgb_model.predict(X_test)\n",
        "\n",
        "print(\"XGBoost Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_xgb):.4f}\")\n",
        "print(classification_report(y_test, y_pred_xgb))\n",
        "\n",
        "cm_xgb = confusion_matrix(y_test, y_pred_xgb)\n",
        "sns.heatmap(cm_xgb, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"XGBoost Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n",
        "\n",
        "# Step 6: Train CatBoost with manually tuned hyperparameters\n",
        "catboost_model = cb.CatBoostClassifier(\n",
        "    iterations=1000,          # Manually set hyperparameters\n",
        "    learning_rate=0.05,\n",
        "    depth=5,\n",
        "    random_state=42,\n",
        "    verbose=0\n",
        ")\n",
        "\n",
        "catboost_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_catboost = catboost_model.predict(X_test)\n",
        "\n",
        "print(\"CatBoost Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_catboost):.4f}\")\n",
        "print(classification_report(y_test, y_pred_catboost))\n",
        "\n",
        "cm_catboost = confusion_matrix(y_test, y_pred_catboost)\n",
        "sns.heatmap(cm_catboost, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"CatBoost Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n",
        "\n",
        "# Step 7: Train LightGBM with manually tuned hyperparameters\n",
        "lightgbm_model = lgb.LGBMClassifier(\n",
        "    n_estimators=200,         # Manually set hyperparameters\n",
        "    learning_rate=0.05,\n",
        "    max_depth=5,\n",
        "    subsample=0.8,\n",
        "    colsample_bytree=0.8,\n",
        "    random_state=42\n",
        ")\n",
        "\n",
        "lightgbm_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_lightgbm = lightgbm_model.predict(X_test)\n",
        "\n",
        "print(\"LightGBM Results:\")\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred_lightgbm):.4f}\")\n",
        "print(classification_report(y_test, y_pred_lightgbm))\n",
        "\n",
        "cm_lightgbm = confusion_matrix(y_test, y_pred_lightgbm)\n",
        "sns.heatmap(cm_lightgbm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title(\"LightGBM Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ft8h6sYfMaGG",
        "outputId": "11ef0412-ebe1-4c68-bc41-9eb118ff3737"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBoost Results:\n",
            "Accuracy: 0.7598\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.81      0.83      1033\n",
            "           1       0.54      0.61      0.57       374\n",
            "\n",
            "    accuracy                           0.76      1407\n",
            "   macro avg       0.70      0.71      0.70      1407\n",
            "weighted avg       0.77      0.76      0.76      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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TTRt2jQVFRWZet53331X06dPL9dYEgQAzsa7UYBK1qtXLy1fvlw2m00ffvih4uLi5Onpqfj4eIdxBQUF8vLycso5AwMDnXIcALgYVDaASubt7a3Q0FA1bNhQsbGxioiI0Nq1a+1THzNmzFBYWJiaNWsmSTpy5Ijuuusu1a5dW4GBgerfv79++ukn+/GKi4s1duxY1a5dW3Xr1tVjjz2mP7+F4M/TKDabTY8//riuuuoqeXt7q0mTJlq2bJl++ukn+7s76tSpI4vFoiFDhkj6/c29CQkJaty4sXx8fNSmTRutWbPG4Twffvihrr32Wvn4+Kh79+4OcQJwXSQbQBXz8fFRQUGBJGnTpk1KS0tTcnKy1q9fr8LCQkVGRqpWrVr6/PPPtW3bNvn5+alXr172fZ555hklJSXplVde0RdffKFTp07pvffeu+A577vvPr3xxhtasGCBDh48qBdeeEF+fn666qqr9M4770iS0tLSdPz4cT333HOSpISEBL366qtaunSpDhw4oDFjxujee+/Vli1bJP2eFA0cOFB9+/bV3r179eCDD+qJJ54w62MDUJ0YACpNTEyM0b9/f8MwDKOkpMRITk42vL29jfHjxxsxMTFGSEiIYbPZ7ONfe+01o1mzZkZJSYm9zWazGT4+PsZHH31kGIZh1K9f30hMTLT3FxYWGldeeaX9PIZhGN26dTMeffRRwzAMIy0tzZBkJCcnlxnjZ599Zkgyfv31V3tbfn6+UbNmTWP79u0OY4cOHWrcc889hmEYRnx8vBEeHu7Q//jjj5c6FgDXwz0bQCVbv369/Pz8VFhYqJKSEv3rX//SlClTFBcXp1atWjncp/H111/r+++/V61atRyOkZ+frx9++EHZ2dk6fvy4OnXqZO/z8PBQhw4dSk2lnLN37165u7urW7du5Y75+++/19mzZ3Xrrbc6tBcUFKhdu3aSpIMHDzrEIUlWq7Xc5wBw+SLZACpZ9+7dtWTJEnl5eSksLEweHv/7a+jr6+swNjc3V+3bt9fKlStLHScoKOiizu/j41PhfXJzcyVJH3zwga644gqHPm9v74uKA4DrINkAKpmvr6+aNGlSrrHXX3+93nrrLQUHB8vf37/MMfXr19fOnTt10003SZKKioqUmpqq66+/vszxrVq1UklJibZs2aKIiIhS/ecqK8XFxfa28PBweXt7Kz09/bwVkRYtWmjt2rUObTt27PjriwRw2eMGUeASNmjQINWrV0/9+/fX559/rsOHD2vz5s165JFHdPToUUnSo48+qlmzZun999/Xt99+qxEjRlzwGRmNGjVSTEyMHnjgAb3//vv2Y7799tuSpIYNG8pisWj9+vU6ceKEcnNzVatWLY0fP15jxozRihUr9MMPP+jLL7/UwoULtWLFCknSww8/rEOHDmnChAlKS0vTqlWrlJSUZPZHBKAaINkALmE1a9bU1q1b1aBBAw0cOFAtWrTQ0KFDlZ+fb690jBs3ToMHD1ZMTIysVqtq1aql22+//YLHXbJkie644w6NGDFCzZs317Bhw5SXlydJuuKKKzR16lQ98cQTCgkJ0ciRIyVJ06dP18SJE5WQkKAWLVqoV69e+uCDD9S4cWNJUoMGDfTOO+/o/fffV5s2bbR06VLNnDnTxE8HQHVhMc53FxkAAIATUNkAAACmItkAAACmItkAAACmItkAAACmItkAAACmItkAAACmItkAAACmItkAAACmItkAAACmItkAAACmItkAAACmItkAAACm+n+d6AsvFcZaeQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CatBoost Results:\n",
            "Accuracy: 0.7719\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.83      0.84      1033\n",
            "           1       0.56      0.62      0.59       374\n",
            "\n",
            "    accuracy                           0.77      1407\n",
            "   macro avg       0.71      0.72      0.72      1407\n",
            "weighted avg       0.78      0.77      0.78      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 4130, number of negative: 4130\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002182 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 618\n",
            "[LightGBM] [Info] Number of data points in the train set: 8260, number of used features: 19\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "LightGBM Results:\n",
            "Accuracy: 0.7512\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.79      0.82      1033\n",
            "           1       0.53      0.64      0.58       374\n",
            "\n",
            "    accuracy                           0.75      1407\n",
            "   macro avg       0.69      0.71      0.70      1407\n",
            "weighted avg       0.77      0.75      0.76      1407\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.feature_selection import SelectFromModel\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import xgboost as xgb\n",
        "\n",
        "# Assuming df is already defined and preprocessed\n",
        "df = df.dropna()\n",
        "\n",
        "# Step 1: Split the data into features and target\n",
        "target_column = 'Churn'  # Assume target column is named 'Churn'\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "# Step 2: Label Encoding for categorical columns\n",
        "categorical_columns = X.select_dtypes(include=['object']).columns\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "for col in categorical_columns:\n",
        "    X[col] = label_encoder.fit_transform(X[col])\n",
        "\n",
        "# Step 3: Split the dataset into training (80%) and testing (20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 4: Handle class imbalance using SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
        "\n",
        "# Step 5: Initialize a RandomForestClassifier (or any classifier of your choice)\n",
        "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "\n",
        "# Step 6: Fit the model on all features first\n",
        "rf_model.fit(X_train_resampled, y_train_resampled)\n",
        "\n",
        "# Step 7: Select features based on feature importances\n",
        "# You can tune this threshold based on trial and error\n",
        "sfm = SelectFromModel(rf_model, threshold=\"mean\", max_features=10, importance_getter='auto')\n",
        "sfm.fit(X_train_resampled, y_train_resampled)\n",
        "\n",
        "# Get the selected features based on the model\n",
        "selected_features = X_train.columns[sfm.get_support()]\n",
        "\n",
        "print(f\"Selected Features: {selected_features}\")\n",
        "\n",
        "# Step 8: Train the model using only the selected features\n",
        "X_train_selected = X_train_resampled[selected_features]\n",
        "X_test_selected = X_test[selected_features]\n",
        "\n",
        "# Step 9: Train XGBoost or another model with the selected features\n",
        "xgb_model = xgb.XGBClassifier(n_estimators=100, random_state=42)\n",
        "xgb_model.fit(X_train_selected, y_train_resampled)\n",
        "\n",
        "# Step 10: Evaluate the model on the test set\n",
        "y_pred = xgb_model.predict(X_test_selected)\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vlWJyp1tNQ3o",
        "outputId": "d736dcf9-4b93-4a2f-8dd8-3ee8f92c05ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selected Features: Index(['tenure', 'Contract', 'MonthlyCharges', 'TotalCharges'], dtype='object')\n",
            "Accuracy: 0.7321\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.74      0.80      1033\n",
            "           1       0.50      0.72      0.59       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.69      0.73      0.70      1407\n",
            "weighted avg       0.78      0.73      0.74      1407\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AosGGPRUOepQ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}