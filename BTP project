{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vaibhav-Bhatia-29/CE_MATLAB/blob/main/BTP%20project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "id": "SIsVA1nNa-xO",
        "outputId": "6dd05288-afb8-46f6-ba18-881d9721a228"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-e796a09e-e3cd-4716-a2c5-2dc42c90ed8d\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-e796a09e-e3cd-4716-a2c5-2dc42c90ed8d\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Saving IBM_Telco_dataset.xlsx to IBM_Telco_dataset.xlsx\n",
            "Uploaded file: IBM_Telco_dataset.xlsx\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "\n",
        "# Prompt the user to upload a file\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Display the names of the uploaded files\n",
        "for filename in uploaded.keys():\n",
        "    print(f\"Uploaded file: {filename}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WDGJCYdZbTvn",
        "outputId": "2ea59413-43b2-43ba-8d32-1f108052d089"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Column Names and Data Types:\n",
            "customerID           object\n",
            "gender               object\n",
            "SeniorCitizen         int64\n",
            "Partner              object\n",
            "Dependents           object\n",
            "tenure                int64\n",
            "PhoneService         object\n",
            "MultipleLines        object\n",
            "InternetService      object\n",
            "OnlineSecurity       object\n",
            "OnlineBackup         object\n",
            "DeviceProtection     object\n",
            "TechSupport          object\n",
            "StreamingTV          object\n",
            "StreamingMovies      object\n",
            "Contract             object\n",
            "PaperlessBilling     object\n",
            "PaymentMethod        object\n",
            "MonthlyCharges      float64\n",
            "TotalCharges        float64\n",
            "Churn                object\n",
            "dtype: object\n",
            "\n",
            "Missing Values in Each Column:\n",
            "customerID           0\n",
            "gender               0\n",
            "SeniorCitizen        0\n",
            "Partner              0\n",
            "Dependents           0\n",
            "tenure               0\n",
            "PhoneService         0\n",
            "MultipleLines        0\n",
            "InternetService      0\n",
            "OnlineSecurity       0\n",
            "OnlineBackup         0\n",
            "DeviceProtection     0\n",
            "TechSupport          0\n",
            "StreamingTV          0\n",
            "StreamingMovies      0\n",
            "Contract             0\n",
            "PaperlessBilling     0\n",
            "PaymentMethod        0\n",
            "MonthlyCharges       0\n",
            "TotalCharges        11\n",
            "Churn                0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the dataset\n",
        "file_path = \"IBM_Telco_dataset.xlsx\"\n",
        "df = pd.read_excel(file_path)\n",
        "\n",
        "# Display column names with data types\n",
        "print(\"Column Names and Data Types:\")\n",
        "print(df.dtypes)\n",
        "\n",
        "# Check for missing values\n",
        "print(\"\\nMissing Values in Each Column:\")\n",
        "print(df.isnull().sum())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IhN6fIusbzIa",
        "outputId": "f6bef4fe-d928-4b46-fd21-f8895687cd8b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updated DataFrame shape: (7032, 20)\n",
            "\n",
            "Columns in the updated DataFrame:\n",
            "Index(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure',\n",
            "       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n",
            "       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n",
            "       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod',\n",
            "       'MonthlyCharges', 'TotalCharges', 'Churn'],\n",
            "      dtype='object')\n"
          ]
        }
      ],
      "source": [
        "# Drop rows with missing values\n",
        "df = df.dropna()\n",
        "\n",
        "# Drop the 'customerID' column\n",
        "df = df.drop(columns=['customerID'])\n",
        "\n",
        "# Display the shape of the updated DataFrame and confirm changes\n",
        "print(f\"Updated DataFrame shape: {df.shape}\")\n",
        "print(\"\\nColumns in the updated DataFrame:\")\n",
        "print(df.columns)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6EKot8kqeOrb",
        "outputId": "64975666-589c-4f9a-a9eb-bee7682b6547"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Skewness of original numeric columns:\n",
            "tenure            0.237731\n",
            "MonthlyCharges   -0.222103\n",
            "TotalCharges      0.961642\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder, OrdinalEncoder, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Step 1: Train-test split\n",
        "X = df.drop(columns=[\"Churn\"])\n",
        "y = df[\"Churn\"]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "\n",
        "# Step 2: Label encoding for target variable\n",
        "label_encoder = LabelEncoder()\n",
        "y_train = label_encoder.fit_transform(y_train)\n",
        "y_test = label_encoder.transform(y_test)\n",
        "\n",
        "# Step 3: Ordinal encoding for \"Contract\"\n",
        "ordinal_features = [\"Contract\"]\n",
        "ordinal_encoder = OrdinalEncoder(dtype=int)\n",
        "\n",
        "# Step 4: One-hot encoding for other categorical features\n",
        "onehot_features = [\n",
        "    \"gender\", \"Partner\", \"Dependents\", \"PhoneService\", \"MultipleLines\",\n",
        "    \"InternetService\", \"OnlineSecurity\", \"OnlineBackup\", \"DeviceProtection\",\n",
        "    \"TechSupport\", \"StreamingTV\", \"StreamingMovies\", \"PaperlessBilling\", \"PaymentMethod\"\n",
        "]\n",
        "onehot_encoder = OneHotEncoder(drop=\"first\", sparse_output=False, dtype=int)\n",
        "\n",
        "# Combine all transformations in a ColumnTransformer (skip scaling)\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"ord\", ordinal_encoder, ordinal_features),\n",
        "        (\"onehot\", onehot_encoder, onehot_features)\n",
        "    ],\n",
        "    remainder=\"drop\"\n",
        ")\n",
        "\n",
        "# Fit the preprocessor on training data and transform both train and test\n",
        "X_train = preprocessor.fit_transform(X_train)\n",
        "X_test = preprocessor.transform(X_test)\n",
        "\n",
        "# Get new column names after transformations\n",
        "onehot_column_names = preprocessor.named_transformers_[\"onehot\"].get_feature_names_out(onehot_features)\n",
        "all_columns = ordinal_features + list(onehot_column_names)\n",
        "\n",
        "# Convert to DataFrame for easier manipulation\n",
        "X_train_df = pd.DataFrame(X_train, columns=all_columns)\n",
        "\n",
        "# Skewness Calculation\n",
        "numeric_features = [\"tenure\", \"MonthlyCharges\", \"TotalCharges\"]\n",
        "\n",
        "# Compute skewness for the original numeric columns before any transformations\n",
        "skewness = df[numeric_features].skew()\n",
        "print(\"Skewness of original numeric columns:\")\n",
        "print(skewness)\n",
        "\n",
        "# If you'd like to check skewness of transformed numeric columns, you can do so here:\n",
        "# Note that, after transformation, features will not directly reflect the original distribution.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KA1u_CnQi9UT",
        "outputId": "3dd6291b-9470-4105-a837-d5608a40709e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Overall Accuracy: 0.7953\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.89      0.86      1033\n",
            "           1       0.64      0.54      0.58       374\n",
            "\n",
            "    accuracy                           0.80      1407\n",
            "   macro avg       0.74      0.71      0.72      1407\n",
            "weighted avg       0.79      0.80      0.79      1407\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OrdinalEncoder, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.preprocessing import PowerTransformer\n",
        "import numpy as np\n",
        "\n",
        "# Step 1: Log transform TotalCharges\n",
        "df['TotalCharges'] = np.log1p(df['TotalCharges'])\n",
        "\n",
        "# Step 2: Apply Yeo-Johnson Transformation on 'tenure' and 'MonthlyCharges'\n",
        "pt = PowerTransformer(method='yeo-johnson')\n",
        "\n",
        "# Apply Yeo-Johnson transformation only to 'tenure' and 'MonthlyCharges'\n",
        "df[['tenure', 'MonthlyCharges']] = pt.fit_transform(df[['tenure', 'MonthlyCharges']])\n",
        "\n",
        "# Step 3: Train-test split\n",
        "X = df.drop(columns=[\"Churn\"])\n",
        "y = df[\"Churn\"]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "\n",
        "# Step 4: Scaling the numerical features (now transformed)\n",
        "numeric_features = [\"TotalCharges\", \"tenure\", \"MonthlyCharges\"]\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Step 5: Label encoding for target variable\n",
        "label_encoder = LabelEncoder()\n",
        "y_train = label_encoder.fit_transform(y_train)\n",
        "y_test = label_encoder.transform(y_test)\n",
        "\n",
        "# Step 6: Ordinal encoding for \"Contract\"\n",
        "ordinal_features = [\"Contract\"]\n",
        "ordinal_encoder = OrdinalEncoder(dtype=int)\n",
        "\n",
        "# Step 7: One-hot encoding for other categorical features\n",
        "onehot_features = [\n",
        "    \"gender\", \"Partner\", \"Dependents\", \"PhoneService\", \"MultipleLines\",\n",
        "    \"InternetService\", \"OnlineSecurity\", \"OnlineBackup\", \"DeviceProtection\",\n",
        "    \"TechSupport\", \"StreamingTV\", \"StreamingMovies\", \"PaperlessBilling\", \"PaymentMethod\"\n",
        "]\n",
        "onehot_encoder = OneHotEncoder(drop=\"first\", sparse_output=False, dtype=int)\n",
        "\n",
        "# Combine all transformations in a ColumnTransformer\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"num\", scaler, numeric_features),\n",
        "        (\"ord\", ordinal_encoder, ordinal_features),\n",
        "        (\"onehot\", onehot_encoder, onehot_features)\n",
        "    ],\n",
        "    remainder=\"drop\"\n",
        ")\n",
        "\n",
        "# Fit the preprocessor on training data and transform both train and test\n",
        "X_train = preprocessor.fit_transform(X_train)\n",
        "X_test = preprocessor.transform(X_test)\n",
        "\n",
        "# Step 8: Initialize and train the Logistic Regression model\n",
        "logreg = LogisticRegression(max_iter=1000, penalty = None, solver = 'saga')\n",
        "logreg.fit(X_train, y_train)\n",
        "\n",
        "# Step 9: Predict on test data\n",
        "y_pred = logreg.predict(X_test)\n",
        "\n",
        "# Step 10: Evaluate performance\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "classification_rep = classification_report(y_test, y_pred)\n",
        "\n",
        "# Print results\n",
        "print(f\"Overall Accuracy: {accuracy:.4f}\")\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_rep)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "s2qxI8lYr07P",
        "outputId": "6c1acdeb-6537-4e00-d9eb-97d4c8c4ab1c"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:07:48] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Forest Results:\n",
            "Accuracy: 0.8531\n",
            "ROC-AUC: 0.7967\n",
            "Confusion Matrix:\n",
            "[[598  37]\n",
            " [ 71  29]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.94      0.92       635\n",
            "           1       0.44      0.29      0.35       100\n",
            "\n",
            "    accuracy                           0.85       735\n",
            "   macro avg       0.67      0.62      0.63       735\n",
            "weighted avg       0.83      0.85      0.84       735\n",
            "\n",
            "\n",
            "XGBoost Results:\n",
            "Accuracy: 0.8435\n",
            "ROC-AUC: 0.6272\n",
            "Confusion Matrix:\n",
            "[[587  48]\n",
            " [ 67  33]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.92      0.91       635\n",
            "           1       0.41      0.33      0.36       100\n",
            "\n",
            "    accuracy                           0.84       735\n",
            "   macro avg       0.65      0.63      0.64       735\n",
            "weighted avg       0.83      0.84      0.84       735\n",
            "\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1600x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, confusion_matrix, classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Step 1: Preprocessing\n",
        "# Identify categorical and numerical columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "\n",
        "# Preprocessing pipeline\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"num\", StandardScaler(), numeric_cols),\n",
        "        (\"cat\", OneHotEncoder(drop=\"first\", sparse_output=False, handle_unknown='ignore'), categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Fit and transform the training data\n",
        "X_train_preprocessed = preprocessor.fit_transform(X_train)\n",
        "X_test_preprocessed = preprocessor.transform(X_test)\n",
        "\n",
        "# Step 2: Handle Class Imbalance using SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train_preprocessed, y_train)\n",
        "\n",
        "# Step 3: Random Forest Model (Default Parameters)\n",
        "rf_model = RandomForestClassifier(random_state=42, class_weight='balanced')\n",
        "rf_model.fit(X_train_resampled, y_train_resampled)\n",
        "\n",
        "# Step 4: XGBoost Model (Default Parameters)\n",
        "xgb_model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss')\n",
        "xgb_model.fit(X_train_resampled, y_train_resampled)\n",
        "\n",
        "# Step 5: Evaluate Random Forest Model\n",
        "# Make predictions on the test set\n",
        "rf_y_pred = rf_model.predict(X_test_preprocessed)\n",
        "rf_y_pred_proba = rf_model.predict_proba(X_test_preprocessed)[:, 1]\n",
        "\n",
        "# Evaluate Random Forest\n",
        "rf_accuracy = accuracy_score(y_test, rf_y_pred)\n",
        "rf_roc_auc = roc_auc_score(y_test, rf_y_pred_proba)\n",
        "rf_conf_matrix = confusion_matrix(y_test, rf_y_pred)\n",
        "rf_class_report = classification_report(y_test, rf_y_pred)\n",
        "\n",
        "# Print Random Forest results\n",
        "print(\"Random Forest Results:\")\n",
        "print(f\"Accuracy: {rf_accuracy:.4f}\")\n",
        "print(f\"ROC-AUC: {rf_roc_auc:.4f}\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(rf_conf_matrix)\n",
        "print(\"Classification Report:\")\n",
        "print(rf_class_report)\n",
        "\n",
        "# Step 6: Evaluate XGBoost Model\n",
        "# Make predictions on the test set\n",
        "xgb_y_pred = xgb_model.predict(X_test_preprocessed)\n",
        "xgb_y_pred_proba = xgb_model.predict_proba(X_test_preprocessed)[:, 1]\n",
        "xgb_final = (xgb_y_pred_proba>=0.5).astype(int)\n",
        "\n",
        "# Evaluate XGBoost\n",
        "xgb_accuracy = accuracy_score(y_test, xgb_final)\n",
        "xgb_roc_auc = roc_auc_score(y_test, xgb_final)\n",
        "xgb_conf_matrix = confusion_matrix(y_test, xgb_final)\n",
        "xgb_class_report = classification_report(y_test, xgb_final)\n",
        "\n",
        "# Print XGBoost results\n",
        "print(\"\\nXGBoost Results:\")\n",
        "print(f\"Accuracy: {xgb_accuracy:.4f}\")\n",
        "print(f\"ROC-AUC: {xgb_roc_auc:.4f}\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(xgb_conf_matrix)\n",
        "print(\"Classification Report:\")\n",
        "print(xgb_class_report)\n",
        "\n",
        "# Step 7: Plot ROC Curves for Both Models\n",
        "# Random Forest ROC Curve\n",
        "fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_test, rf_y_pred_proba)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(fpr_rf, tpr_rf, label=f'Random Forest ROC Curve (AUC = {rf_roc_auc:.2f})')\n",
        "\n",
        "# XGBoost ROC Curve\n",
        "fpr_xgb, tpr_xgb, thresholds_xgb = roc_curve(y_test, xgb_y_pred_proba)\n",
        "plt.plot(fpr_xgb, tpr_xgb, label=f'XGBoost ROC Curve (AUC = {xgb_roc_auc:.2f})')\n",
        "\n",
        "# Plot settings\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Step 8: Plot Confusion Matrices for Both Models\n",
        "# Random Forest Confusion Matrix\n",
        "plt.figure(figsize=(16, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.heatmap(rf_conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('Random Forest Confusion Matrix')\n",
        "\n",
        "# XGBoost Confusion Matrix\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.heatmap(xgb_conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('XGBoost Confusion Matrix')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "KZg1sss_spHO",
        "outputId": "935ee92a-1dd7-4065-ff2e-a37c74223938"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "[I 2024-12-23 09:33:30,109] A new study created in memory with name: no-name-06ed819e-2db4-4a26-b4fd-3d8ff3fa0010\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:30] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:32] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:33] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:34] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:34] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:33:35,524] Trial 0 finished with value: 0.9667803335606671 and parameters: {'n_estimators': 110, 'max_depth': 6, 'learning_rate': 0.028857915792561056, 'subsample': 0.93234029856348, 'colsample_bytree': 0.9570392072824887}. Best is trial 0 with value: 0.9667803335606671.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:35] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:36] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:36] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:37] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:37] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:33:38,461] Trial 1 finished with value: 0.9711800173600349 and parameters: {'n_estimators': 161, 'max_depth': 6, 'learning_rate': 0.18662267158301682, 'subsample': 0.9523279363880035, 'colsample_bytree': 0.8651907219572994}. Best is trial 1 with value: 0.9711800173600349.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:38] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:39] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:40] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:41] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:41] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:33:42,782] Trial 2 finished with value: 0.9737398474796949 and parameters: {'n_estimators': 200, 'max_depth': 6, 'learning_rate': 0.05514664590083487, 'subsample': 0.8262727315183449, 'colsample_bytree': 0.8782093756720051}. Best is trial 2 with value: 0.9737398474796949.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:42] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:43] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:43] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:44] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:45] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:33:48,279] Trial 3 finished with value: 0.9712989800979601 and parameters: {'n_estimators': 229, 'max_depth': 3, 'learning_rate': 0.09065819195322589, 'subsample': 0.8049999383835803, 'colsample_bytree': 0.9170308266965933}. Best is trial 2 with value: 0.9737398474796949.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:48] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:48] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:49] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:49] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:50] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:33:50,371] Trial 4 finished with value: 0.9692820385640772 and parameters: {'n_estimators': 294, 'max_depth': 3, 'learning_rate': 0.17736880066653044, 'subsample': 0.8530721136372288, 'colsample_bytree': 0.8306703566133812}. Best is trial 2 with value: 0.9737398474796949.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:50] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:51] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:52] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:53] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:54] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:33:55,623] Trial 5 finished with value: 0.9699175398350797 and parameters: {'n_estimators': 285, 'max_depth': 6, 'learning_rate': 0.16082646223414487, 'subsample': 0.9489954129131847, 'colsample_bytree': 0.9469913662719707}. Best is trial 2 with value: 0.9737398474796949.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:55] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:56] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:56] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:56] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:57] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:33:57,495] Trial 6 finished with value: 0.9709885919771839 and parameters: {'n_estimators': 170, 'max_depth': 4, 'learning_rate': 0.18432644541549387, 'subsample': 0.824113163306031, 'colsample_bytree': 0.899745837188284}. Best is trial 2 with value: 0.9737398474796949.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:57] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:33:58] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:00] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:02] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:03] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:04,152] Trial 7 finished with value: 0.9705088660177321 and parameters: {'n_estimators': 209, 'max_depth': 5, 'learning_rate': 0.14271809394084467, 'subsample': 0.8714646915469301, 'colsample_bytree': 0.9511426887451813}. Best is trial 2 with value: 0.9737398474796949.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:04] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:05] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:05] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:06] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:07] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:08,822] Trial 8 finished with value: 0.9740800731601464 and parameters: {'n_estimators': 211, 'max_depth': 6, 'learning_rate': 0.052932015591310236, 'subsample': 0.8671787774811061, 'colsample_bytree': 0.9309241405773047}. Best is trial 8 with value: 0.9740800731601464.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:08] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:09] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:09] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:09] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:10] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:10,389] Trial 9 finished with value: 0.9404860809721619 and parameters: {'n_estimators': 122, 'max_depth': 4, 'learning_rate': 0.013046693420461709, 'subsample': 0.8747463137953235, 'colsample_bytree': 0.9105436750004672}. Best is trial 8 with value: 0.9740800731601464.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:10] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:11] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:14] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:17] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:18] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:20,055] Trial 10 finished with value: 0.9721836443672887 and parameters: {'n_estimators': 250, 'max_depth': 7, 'learning_rate': 0.09271983415935918, 'subsample': 0.985285148948132, 'colsample_bytree': 0.9855299125510701}. Best is trial 8 with value: 0.9740800731601464.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:20] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:21] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:22] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:23] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:24] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:25,316] Trial 11 finished with value: 0.9745349990699982 and parameters: {'n_estimators': 186, 'max_depth': 7, 'learning_rate': 0.05506404936744412, 'subsample': 0.8348065369423249, 'colsample_bytree': 0.8657322465709352}. Best is trial 11 with value: 0.9745349990699982.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:25] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:26] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:28] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:31] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:32] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:33,816] Trial 12 finished with value: 0.9743303986607973 and parameters: {'n_estimators': 172, 'max_depth': 7, 'learning_rate': 0.05754895771997584, 'subsample': 0.9029722594479627, 'colsample_bytree': 0.8164749394787919}. Best is trial 11 with value: 0.9745349990699982.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:33] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:34] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:35] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:36] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:37] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:38,140] Trial 13 finished with value: 0.9743954987909975 and parameters: {'n_estimators': 155, 'max_depth': 7, 'learning_rate': 0.058518090298868286, 'subsample': 0.9079465928534859, 'colsample_bytree': 0.8128598850233406}. Best is trial 11 with value: 0.9745349990699982.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:38] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:38] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:39] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:40] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:41] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:43,124] Trial 14 finished with value: 0.9732663215326431 and parameters: {'n_estimators': 140, 'max_depth': 7, 'learning_rate': 0.11789411205487768, 'subsample': 0.9076605679183953, 'colsample_bytree': 0.8448571446532303}. Best is trial 11 with value: 0.9745349990699982.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:43] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:47] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:48] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:49,181] Trial 15 finished with value: 0.9745760741521483 and parameters: {'n_estimators': 146, 'max_depth': 7, 'learning_rate': 0.07274038600501966, 'subsample': 0.9233161755596389, 'colsample_bytree': 0.8020174581405175}. Best is trial 15 with value: 0.9745760741521483.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:49] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:49] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:50] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:50] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:50] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:51,401] Trial 16 finished with value: 0.9733414966829933 and parameters: {'n_estimators': 142, 'max_depth': 5, 'learning_rate': 0.0801375828059489, 'subsample': 0.9861205341288656, 'colsample_bytree': 0.8497434261939877}. Best is trial 15 with value: 0.9745760741521483.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:51] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:51] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:52] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:53] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:53] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:34:54,108] Trial 17 finished with value: 0.9735553971107942 and parameters: {'n_estimators': 101, 'max_depth': 7, 'learning_rate': 0.12281746121462314, 'subsample': 0.9309371392439912, 'colsample_bytree': 0.8027498014365919}. Best is trial 15 with value: 0.9745760741521483.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:54] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:54] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:55] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:56] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:34:59] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:00,943] Trial 18 finished with value: 0.9726381827763655 and parameters: {'n_estimators': 184, 'max_depth': 5, 'learning_rate': 0.035101486999060835, 'subsample': 0.8437983429225798, 'colsample_bytree': 0.880350394070536}. Best is trial 15 with value: 0.9745760741521483.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:00] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:02] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:03] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:04] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:05] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:06,911] Trial 19 finished with value: 0.972978795957592 and parameters: {'n_estimators': 244, 'max_depth': 7, 'learning_rate': 0.0811190150890479, 'subsample': 0.8844027739755179, 'colsample_bytree': 0.834310881536782}. Best is trial 15 with value: 0.9745760741521483.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:06] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:07] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:07] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:07] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:08] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:08,383] Trial 20 finished with value: 0.9715748806497613 and parameters: {'n_estimators': 132, 'max_depth': 4, 'learning_rate': 0.1086865237838518, 'subsample': 0.9696763269111606, 'colsample_bytree': 0.8636151836441244}. Best is trial 15 with value: 0.9745760741521483.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:08] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:09] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:10] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:12] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:14] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:15,428] Trial 21 finished with value: 0.9743327236654473 and parameters: {'n_estimators': 153, 'max_depth': 7, 'learning_rate': 0.06791318341905304, 'subsample': 0.9182809125094143, 'colsample_bytree': 0.8013900533524546}. Best is trial 15 with value: 0.9745760741521483.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:15] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:16] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:17] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:18] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:19] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:20,737] Trial 22 finished with value: 0.9747023994047987 and parameters: {'n_estimators': 181, 'max_depth': 7, 'learning_rate': 0.040861209724177026, 'subsample': 0.8873615327924957, 'colsample_bytree': 0.8190047525123499}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:20] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:21] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:22] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:23] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:23] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:26,062] Trial 23 finished with value: 0.9742040734081467 and parameters: {'n_estimators': 180, 'max_depth': 6, 'learning_rate': 0.03725989651135121, 'subsample': 0.8924340641975114, 'colsample_bytree': 0.8245890336574473}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:26] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:29] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:30] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:31] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:33] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:34,310] Trial 24 finished with value: 0.9729396583793168 and parameters: {'n_estimators': 189, 'max_depth': 7, 'learning_rate': 0.022567584673130366, 'subsample': 0.8054720990801557, 'colsample_bytree': 0.8451716583920766}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:34] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:35] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:36] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:37] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:38] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:40,211] Trial 25 finished with value: 0.9740792981585964 and parameters: {'n_estimators': 224, 'max_depth': 6, 'learning_rate': 0.04049671779685834, 'subsample': 0.8474428597223687, 'colsample_bytree': 0.8834207385438161}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:40] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:44] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:45] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:48] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:49,527] Trial 26 finished with value: 0.9651001302002605 and parameters: {'n_estimators': 195, 'max_depth': 7, 'learning_rate': 0.011740180397319503, 'subsample': 0.8241708045632247, 'colsample_bytree': 0.8594357138205192}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:49] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:50] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:50] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:51] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:51] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:35:52,143] Trial 27 finished with value: 0.9738754727509453 and parameters: {'n_estimators': 121, 'max_depth': 6, 'learning_rate': 0.07192501840075202, 'subsample': 0.9301160628792688, 'colsample_bytree': 0.8190376646575644}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:52] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:53] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:57] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:58] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:35:59] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:00,717] Trial 28 finished with value: 0.9745458490916983 and parameters: {'n_estimators': 162, 'max_depth': 7, 'learning_rate': 0.04524427073886023, 'subsample': 0.9480072751667653, 'colsample_bytree': 0.8349855368492761}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:00] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:01] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:01] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:02] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:03] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:03,615] Trial 29 finished with value: 0.9661080197160394 and parameters: {'n_estimators': 116, 'max_depth': 6, 'learning_rate': 0.026324272562315523, 'subsample': 0.9504737553836515, 'colsample_bytree': 0.8341024779807396}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:03] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:04] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:05] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:06] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:06] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:07,665] Trial 30 finished with value: 0.9741761733523466 and parameters: {'n_estimators': 136, 'max_depth': 7, 'learning_rate': 0.0435752280767416, 'subsample': 0.9658107569735299, 'colsample_bytree': 0.8010012506617432}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:07] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:10] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:13] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:14] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:14] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:15,797] Trial 31 finished with value: 0.9741009982019964 and parameters: {'n_estimators': 164, 'max_depth': 7, 'learning_rate': 0.0692992705370342, 'subsample': 0.9185382303965479, 'colsample_bytree': 0.8431480515890631}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:15] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:16] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:17] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:18] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:19] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:20,288] Trial 32 finished with value: 0.9746582243164488 and parameters: {'n_estimators': 147, 'max_depth': 7, 'learning_rate': 0.04789789032604433, 'subsample': 0.9350232627828963, 'colsample_bytree': 0.8142614195483557}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:20] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:21] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:21] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:22] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:24] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:26,786] Trial 33 finished with value: 0.973996372992746 and parameters: {'n_estimators': 150, 'max_depth': 6, 'learning_rate': 0.0445515866516057, 'subsample': 0.9375333255379764, 'colsample_bytree': 0.8130365276453266}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:26] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:27] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:28] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:30] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:31] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:32,167] Trial 34 finished with value: 0.9716140182280364 and parameters: {'n_estimators': 163, 'max_depth': 7, 'learning_rate': 0.023288419642907877, 'subsample': 0.9613585553924135, 'colsample_bytree': 0.8233249287560406}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:32] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:33] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:33] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:34] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:35] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:36,744] Trial 35 finished with value: 0.9730562961125921 and parameters: {'n_estimators': 175, 'max_depth': 7, 'learning_rate': 0.09298538378147961, 'subsample': 0.9215243371553873, 'colsample_bytree': 0.8117227268886473}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:36] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:39] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:41] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:41] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:42] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:42,892] Trial 36 finished with value: 0.9733407216814435 and parameters: {'n_estimators': 146, 'max_depth': 6, 'learning_rate': 0.0794314168396379, 'subsample': 0.937220706467413, 'colsample_bytree': 0.8321781570283738}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:42] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:43] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:44] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:44] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:45] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:45,945] Trial 37 finished with value: 0.9735263345526691 and parameters: {'n_estimators': 128, 'max_depth': 6, 'learning_rate': 0.04977070626577497, 'subsample': 0.997327999698081, 'colsample_bytree': 0.856117792365084}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:47] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:47] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:47,827] Trial 38 finished with value: 0.9719418438836878 and parameters: {'n_estimators': 105, 'max_depth': 5, 'learning_rate': 0.19934178022497295, 'subsample': 0.8866550291815921, 'colsample_bytree': 0.9920426957389759}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:47] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:48] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:50] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:52] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:55] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:56,981] Trial 39 finished with value: 0.9738336226672454 and parameters: {'n_estimators': 204, 'max_depth': 7, 'learning_rate': 0.061582182643132366, 'subsample': 0.9432276445852478, 'colsample_bytree': 0.8720556565762226}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:57] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:57] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:57] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:57] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:58] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:36:58,283] Trial 40 finished with value: 0.9614622729245459 and parameters: {'n_estimators': 161, 'max_depth': 3, 'learning_rate': 0.031858478782648914, 'subsample': 0.9562688864609145, 'colsample_bytree': 0.8935025492982811}. Best is trial 22 with value: 0.9747023994047987.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:58] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:36:59] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:00] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:01] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:02] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:03,681] Trial 41 finished with value: 0.974748124496249 and parameters: {'n_estimators': 192, 'max_depth': 7, 'learning_rate': 0.050414832008355136, 'subsample': 0.9252849671330997, 'colsample_bytree': 0.8269897326198468}. Best is trial 41 with value: 0.974748124496249.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:03] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:04] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:08] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:10] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:11] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:12,680] Trial 42 finished with value: 0.974491598983198 and parameters: {'n_estimators': 219, 'max_depth': 7, 'learning_rate': 0.047910418119200965, 'subsample': 0.9244071664300886, 'colsample_bytree': 0.8257007493737617}. Best is trial 41 with value: 0.974748124496249.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:12] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:13] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:14] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:15] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:16] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:17,841] Trial 43 finished with value: 0.9737127224254449 and parameters: {'n_estimators': 195, 'max_depth': 7, 'learning_rate': 0.06482010676967397, 'subsample': 0.8944070591716791, 'colsample_bytree': 0.8386548856515764}. Best is trial 41 with value: 0.974748124496249.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:17] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:19] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:23] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:24] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:25] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:26,805] Trial 44 finished with value: 0.9702236654473309 and parameters: {'n_estimators': 170, 'max_depth': 7, 'learning_rate': 0.019464578857139904, 'subsample': 0.9133349539388292, 'colsample_bytree': 0.8092189683394964}. Best is trial 41 with value: 0.974748124496249.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:26] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:27] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:28] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:29] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:30] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:31,129] Trial 45 finished with value: 0.9721115692231385 and parameters: {'n_estimators': 239, 'max_depth': 6, 'learning_rate': 0.10062675502892857, 'subsample': 0.9737913761774376, 'colsample_bytree': 0.8240592889235051}. Best is trial 41 with value: 0.974748124496249.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:31] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:32] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:33] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:38] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:39] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:40,289] Trial 46 finished with value: 0.9734201593403184 and parameters: {'n_estimators': 160, 'max_depth': 7, 'learning_rate': 0.03128113351962167, 'subsample': 0.9430855703269281, 'colsample_bytree': 0.9283761415554539}. Best is trial 41 with value: 0.974748124496249.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:40] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:40] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:41] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:42] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:42] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:43,472] Trial 47 finished with value: 0.9724083948167896 and parameters: {'n_estimators': 275, 'max_depth': 4, 'learning_rate': 0.05182410872089864, 'subsample': 0.8677057529516641, 'colsample_bytree': 0.9705752887789778}. Best is trial 41 with value: 0.974748124496249.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:43] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:44] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:45] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:47,801] Trial 48 finished with value: 0.9734003968007936 and parameters: {'n_estimators': 211, 'max_depth': 6, 'learning_rate': 0.07472764985780307, 'subsample': 0.9030886895502557, 'colsample_bytree': 0.8520347088437837}. Best is trial 41 with value: 0.974748124496249.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:47] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:52] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:53] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:54] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:55] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "[I 2024-12-23 09:37:56,624] Trial 49 finished with value: 0.9748868497736997 and parameters: {'n_estimators': 177, 'max_depth': 7, 'learning_rate': 0.03942400783354699, 'subsample': 0.8814294237311766, 'colsample_bytree': 0.8069851594492482}. Best is trial 49 with value: 0.9748868497736997.\n",
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [09:37:56] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Forest Results:\n",
            "Best Parameters: {'max_depth': None, 'min_samples_split': 2, 'n_estimators': 300}\n",
            "Accuracy: 0.8449\n",
            "ROC-AUC: 0.7963\n",
            "Confusion Matrix:\n",
            "[[591  44]\n",
            " [ 70  30]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.93      0.91       635\n",
            "           1       0.41      0.30      0.34       100\n",
            "\n",
            "    accuracy                           0.84       735\n",
            "   macro avg       0.65      0.62      0.63       735\n",
            "weighted avg       0.83      0.84      0.83       735\n",
            "\n",
            "\n",
            "XGBoost Results:\n",
            "Best Parameters: {'n_estimators': 177, 'max_depth': 7, 'learning_rate': 0.03942400783354699, 'subsample': 0.8814294237311766, 'colsample_bytree': 0.8069851594492482}\n",
            "Accuracy: 0.8449\n",
            "ROC-AUC: 0.8092\n",
            "Confusion Matrix:\n",
            "[[591  44]\n",
            " [ 70  30]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.93      0.91       635\n",
            "           1       0.41      0.30      0.34       100\n",
            "\n",
            "    accuracy                           0.84       735\n",
            "   macro avg       0.65      0.62      0.63       735\n",
            "weighted avg       0.83      0.84      0.83       735\n",
            "\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1600x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.model_selection import GridSearchCV, StratifiedKFold\n",
        "from sklearn.metrics import roc_auc_score\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import optuna\n",
        "\n",
        "# Step 1: Preprocessing\n",
        "# Identify categorical and numerical columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "\n",
        "# Preprocessing pipeline\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"num\", StandardScaler(), numeric_cols),\n",
        "        (\"cat\", OneHotEncoder(drop=\"first\", sparse_output=False, handle_unknown='ignore'), categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Fit and transform the training data\n",
        "X_train_preprocessed = preprocessor.fit_transform(X_train)\n",
        "X_test_preprocessed = preprocessor.transform(X_test)\n",
        "\n",
        "# Step 2: Handle Class Imbalance using SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train_preprocessed, y_train)\n",
        "\n",
        "# Step 3: Random Forest Model with Hyperparameter Tuning\n",
        "# Initialize Random Forest\n",
        "rf_model = RandomForestClassifier(random_state=42, class_weight='balanced')\n",
        "\n",
        "# Hyperparameter Tuning for Random Forest\n",
        "rf_param_grid = {\n",
        "    'n_estimators': [100, 200, 300],\n",
        "    'max_depth': [None, 10, 20, 30],\n",
        "    'min_samples_split': [2, 5, 10]\n",
        "}\n",
        "\n",
        "# Perform GridSearchCV for Random Forest\n",
        "rf_grid_search = GridSearchCV(rf_model, rf_param_grid, cv=5, scoring='roc_auc', n_jobs=-1)\n",
        "rf_grid_search.fit(X_train_resampled, y_train_resampled)\n",
        "\n",
        "# Get the best Random Forest model\n",
        "best_rf_model = rf_grid_search.best_estimator_\n",
        "\n",
        "# Step 4: XGBoost Model with Hyperparameter Tuning Using Optuna\n",
        "def objective(trial):\n",
        "    # Define hyperparameters to tune\n",
        "    params = {\n",
        "        'n_estimators': trial.suggest_int('n_estimators', 100, 300),\n",
        "        'max_depth': trial.suggest_int('max_depth', 3, 7),\n",
        "        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.2),\n",
        "        'subsample': trial.suggest_float('subsample', 0.8, 1.0),\n",
        "        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.8, 1.0),\n",
        "        'use_label_encoder': False,\n",
        "        'eval_metric': 'logloss',\n",
        "        'random_state': 42\n",
        "    }\n",
        "\n",
        "    # Initialize XGBoost model\n",
        "    xgb_model = XGBClassifier(**params)\n",
        "\n",
        "    # Manual cross-validation\n",
        "    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "    roc_auc_scores = []\n",
        "\n",
        "    for train_idx, val_idx in cv.split(X_train_resampled, y_train_resampled):\n",
        "        X_train_fold, X_val_fold = X_train_resampled[train_idx], X_train_resampled[val_idx]\n",
        "        y_train_fold, y_val_fold = y_train_resampled[train_idx], y_train_resampled[val_idx]\n",
        "\n",
        "        xgb_model.fit(X_train_fold, y_train_fold)\n",
        "        y_val_proba = xgb_model.predict_proba(X_val_fold)[:, 1]\n",
        "        roc_auc = roc_auc_score(y_val_fold, y_val_proba)\n",
        "        roc_auc_scores.append(roc_auc)\n",
        "\n",
        "    # Return the mean ROC-AUC score\n",
        "    return sum(roc_auc_scores) / len(roc_auc_scores)\n",
        "\n",
        "# Run Optuna study\n",
        "study = optuna.create_study(direction='maximize')\n",
        "study.optimize(objective, n_trials=50)\n",
        "\n",
        "# Get the best parameters\n",
        "best_xgb_params = study.best_params\n",
        "\n",
        "# Train the best XGBoost model\n",
        "best_xgb_model = XGBClassifier(**best_xgb_params, use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
        "best_xgb_model.fit(X_train_resampled, y_train_resampled)\n",
        "\n",
        "# Step 5: Evaluate Random Forest Model\n",
        "# Make predictions on the test set\n",
        "rf_y_pred = best_rf_model.predict(X_test_preprocessed)\n",
        "rf_y_pred_proba = best_rf_model.predict_proba(X_test_preprocessed)[:, 1]\n",
        "\n",
        "# Evaluate Random Forest\n",
        "rf_accuracy = accuracy_score(y_test, rf_y_pred)\n",
        "rf_roc_auc = roc_auc_score(y_test, rf_y_pred_proba)\n",
        "rf_conf_matrix = confusion_matrix(y_test, rf_y_pred)\n",
        "rf_class_report = classification_report(y_test, rf_y_pred)\n",
        "\n",
        "# Print Random Forest results\n",
        "print(\"Random Forest Results:\")\n",
        "print(f\"Best Parameters: {rf_grid_search.best_params_}\")\n",
        "print(f\"Accuracy: {rf_accuracy:.4f}\")\n",
        "print(f\"ROC-AUC: {rf_roc_auc:.4f}\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(rf_conf_matrix)\n",
        "print(\"Classification Report:\")\n",
        "print(rf_class_report)\n",
        "\n",
        "# Step 6: Evaluate XGBoost Model\n",
        "# Make predictions on the test set\n",
        "xgb_y_pred = best_xgb_model.predict(X_test_preprocessed)\n",
        "xgb_y_pred_proba = best_xgb_model.predict_proba(X_test_preprocessed)[:, 1]\n",
        "\n",
        "# Evaluate XGBoost\n",
        "xgb_accuracy = accuracy_score(y_test, xgb_y_pred)\n",
        "xgb_roc_auc = roc_auc_score(y_test, xgb_y_pred_proba)\n",
        "xgb_conf_matrix = confusion_matrix(y_test, xgb_y_pred)\n",
        "xgb_class_report = classification_report(y_test, xgb_y_pred)\n",
        "\n",
        "# Print XGBoost results\n",
        "print(\"\\nXGBoost Results:\")\n",
        "print(f\"Best Parameters: {best_xgb_params}\")\n",
        "print(f\"Accuracy: {xgb_accuracy:.4f}\")\n",
        "print(f\"ROC-AUC: {xgb_roc_auc:.4f}\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(xgb_conf_matrix)\n",
        "print(\"Classification Report:\")\n",
        "print(xgb_class_report)\n",
        "\n",
        "# Step 7: Plot ROC Curves for Both Models\n",
        "# Random Forest ROC Curve\n",
        "fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_test, rf_y_pred_proba)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(fpr_rf, tpr_rf, label=f'Random Forest ROC Curve (AUC = {rf_roc_auc:.2f})')\n",
        "\n",
        "# XGBoost ROC Curve\n",
        "fpr_xgb, tpr_xgb, thresholds_xgb = roc_curve(y_test, xgb_y_pred_proba)\n",
        "plt.plot(fpr_xgb, tpr_xgb, label=f'XGBoost ROC Curve (AUC = {xgb_roc_auc:.2f})')\n",
        "\n",
        "# Plot settings\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Step 8: Plot Confusion Matrices for Both Models\n",
        "# Random Forest Confusion Matrix\n",
        "plt.figure(figsize=(16, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.heatmap(rf_conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('Random Forest Confusion Matrix')\n",
        "\n",
        "# XGBoost Confusion Matrix\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.heatmap(xgb_conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('XGBoost Confusion Matrix')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "sNaDg0o1tBG8",
        "outputId": "0b3a3d52-9f9c-45bd-f7d7-724540d3aace"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Skipping cluster 1 due to single class.\n",
            "Skipping cluster 2 due to single class.\n",
            "Skipping cluster 6 due to single class.\n",
            "Skipping cluster 7 due to single class.\n",
            "Skipping cluster 9 due to single class.\n",
            "Skipping cluster 10 due to single class.\n",
            "Skipping cluster 11 due to single class.\n",
            "Skipping cluster 68 due to single class.\n",
            "Skipping cluster 12 due to single class.\n",
            "Skipping cluster 13 due to single class.\n",
            "Skipping cluster 14 due to single class.\n",
            "Skipping cluster 15 due to single class.\n",
            "Skipping cluster 16 due to single class.\n",
            "Skipping cluster 17 due to single class.\n",
            "Skipping cluster 21 due to single class.\n",
            "Skipping cluster 23 due to single class.\n",
            "Skipping cluster 25 due to single class.\n",
            "Skipping cluster 87 due to single class.\n",
            "Skipping cluster 30 due to single class.\n",
            "Skipping cluster 31 due to single class.\n",
            "Skipping cluster 32 due to single class.\n",
            "Skipping cluster 34 due to single class.\n",
            "Skipping cluster 35 due to single class.\n",
            "Skipping cluster 36 due to single class.\n",
            "Skipping cluster 39 due to single class.\n",
            "Skipping cluster 40 due to single class.\n",
            "Skipping cluster 42 due to single class.\n",
            "Skipping cluster 43 due to single class.\n",
            "Skipping cluster 44 due to single class.\n",
            "Skipping cluster 45 due to single class.\n",
            "Skipping cluster 46 due to single class.\n",
            "Skipping cluster 47 due to single class.\n",
            "Skipping cluster 49 due to single class.\n",
            "Skipping cluster 50 due to single class.\n",
            "Skipping cluster 54 due to single class.\n",
            "Skipping cluster 55 due to single class.\n",
            "Skipping cluster 56 due to single class.\n",
            "Skipping cluster 57 due to single class.\n",
            "Skipping cluster 58 due to single class.\n",
            "Skipping cluster 59 due to single class.\n",
            "Skipping cluster 60 due to single class.\n",
            "Skipping cluster 61 due to single class.\n",
            "Skipping cluster 62 due to single class.\n",
            "Skipping cluster 86 due to single class.\n",
            "Skipping cluster 63 due to single class.\n",
            "Skipping cluster 64 due to single class.\n",
            "Skipping cluster 65 due to single class.\n",
            "Skipping cluster 85 due to single class.\n",
            "Skipping cluster 67 due to single class.\n",
            "Skipping cluster 69 due to single class.\n",
            "Skipping cluster 72 due to single class.\n",
            "Skipping cluster 73 due to single class.\n",
            "Skipping cluster 75 due to single class.\n",
            "Skipping cluster 76 due to single class.\n",
            "Skipping cluster 77 due to single class.\n",
            "Skipping cluster 79 due to single class.\n",
            "Skipping cluster 92 due to single class.\n",
            "Skipping cluster 93 due to single class.\n",
            "Logistic Regression Results:\n",
            "Accuracy: 0.7342\n",
            "ROC-AUC: 0.5000\n",
            "Confusion Matrix:\n",
            "[[1033    0]\n",
            " [ 374    0]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      1.00      0.85      1033\n",
            "           1       0.00      0.00      0.00       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.37      0.50      0.42      1407\n",
            "weighted avg       0.54      0.73      0.62      1407\n",
            "\n",
            "\n",
            "Random Forest Results:\n",
            "Accuracy: 0.7342\n",
            "ROC-AUC: 0.5000\n",
            "Confusion Matrix:\n",
            "[[1033    0]\n",
            " [ 374    0]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      1.00      0.85      1033\n",
            "           1       0.00      0.00      0.00       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.37      0.50      0.42      1407\n",
            "weighted avg       0.54      0.73      0.62      1407\n",
            "\n",
            "\n",
            "Decision Tree Results:\n",
            "Accuracy: 0.7342\n",
            "ROC-AUC: 0.5000\n",
            "Confusion Matrix:\n",
            "[[1033    0]\n",
            " [ 374    0]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      1.00      0.85      1033\n",
            "           1       0.00      0.00      0.00       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.37      0.50      0.42      1407\n",
            "weighted avg       0.54      0.73      0.62      1407\n",
            "\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABbIAAAIjCAYAAADWeO3lAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABdjUlEQVR4nO3dd3wUdf4/8HcoCaFKB0UBEUUU0QO7UhRFQBQV/Sqngl2xt1PuVOQsnL33Ah7WE9HjsGI7exf1LJwi2OkdFATm94e/7LEkQAIJmeDz+Xjw0MxOZj672Z3XzmtnZ3KSJEkCAAAAAABSqlJ5DwAAAAAAAFZFkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkc1qdenSJbp06VJqy2vRokUMGDCg1JZHRE5OTlx88cXlPYxy8e6778Yuu+wSNWrUiJycnBg3blypLv/ll1+OnJycePnll0t1uRWZ1zD8vg0YMCBatGhR3sNgHZo/f34ce+yx0aRJk8jJyYkzzjij1NchW7JdfPHFkZOTU97DACq4SZMmRU5OTgwfPrxEv1faHQClZ8qUKdG3b9+oX79+5OTkxPXXX1/q6/g99wtF8d43XRTZFcjw4cMjJycn3nvvvfIeymq98cYbcfHFF8fs2bPLdD0tWrSInJyczL8aNWrEDjvsEH//+9/LdL1kGzduXBx++OGx8cYbR15eXtSrVy+6desWw4YNi6VLl5bZen/99dc4+OCDY+bMmXHdddfFiBEjonnz5mW2vnWtS5cukZOTE61bty7y9rFjx2ae+yNHjizx8j/77LO4+OKLY9KkSWs5UqAsFOR+wb8qVarERhttFAMGDIgffvihvIeXGis+Tsv/O//888t7eEW6/PLL44knnijR78ydOzeGDBkS7du3j5o1a0Z+fn5svfXWcd5558WPP/5YNgP9/y6//PIYPnx4nHTSSTFixIg44ogjynR969Lyz5/XXnut0O1JksTGG28cOTk5se+++67ROtbk7w2sH1bMqGrVqsWGG24Y3bt3jxtvvDHmzZtX3kNMjRX37Vf2r6SlfFmYMmVKnHPOOdGmTZuoXr161KhRIzp06BCXXnppmXcgZ555Zjz77LMxaNCgGDFiROyzzz5lur51qeBD3EqVKsV3331X6Pa5c+dGfn5+5OTkxCmnnFLi5S9cuDAuvvhiB6lVcFXKewCk33PPPVfi33njjTdiyJAhMWDAgNhggw2ybhs/fnxUqlR6n6Fsu+22cfbZZ0dExE8//RR333139O/fPxYtWhTHHXdcqa0nzX7++eeoUqV8Xs533313nHjiidG4ceM44ogjonXr1jFv3rx44YUX4phjjomffvop/vznP5fJuidMmBDffPNN3HXXXXHssceWyTo6deoUP//8c+Tm5pbJ8lenWrVq8dVXX8U777wTO+ywQ9ZtDzzwQFSrVi1++eWXNVr2Z599FkOGDIkuXbqU6BPm0n4NA6v217/+NVq2bBm//PJLvPXWWzF8+PB47bXX4j//+U9Uq1atvIeXGgWP0/K23nrrchrNql1++eXRt2/f6NOnT7Hm//rrr6Nbt27x7bffxsEHHxzHH3985Obmxscffxz33HNPPP744/Hf//63zMb74osvxk477RSDBw8us3WUd7ZUq1YtHnzwwdhtt92ypv/73/+O77//PvLy8tZ42SX9e0dEXHDBBan9IAYouYKM+vXXX2Py5Mnx8ssvxxlnnBHXXnttjB49OrbZZpsyWW/z5s3j559/jqpVq5bo99akA1hb119/fcyfPz/z81NPPRUPPfRQXHfdddGgQYPM9F122WWdj2157777bvTs2TPmz58fhx9+eHTo0CEiIt57773429/+Fq+88kqZPn4vvvhi7L///nHOOeeU2TrKs1+IiMjLy4uHHnoo/vSnP2VNHzVq1Fotd+HChTFkyJCIiBJ94+Cuu+6KZcuWrdW6KT2KbFartAu8tdkRKMpGG20Uhx9+eObnAQMGxKabbhrXXXfdOi+yFyxYEDVq1Fin64yIcisy3nrrrTjxxBNj5513jqeeeipq1aqVue2MM86I9957L/7zn/+U2fqnTp0aEVHow5LSVKlSpXItilq1ahVLliyJhx56KKvI/uWXX+Lxxx+PXr16xWOPPVbm40iSJH755ZfIz88v9dcwsGo9evSIjh07RkTEscceGw0aNIgrrrgiRo8eHYccckg5jy49ln+cSlN5ZXuBJUuWxIEHHhhTpkyJl19+uVDRetlll8UVV1xRpmOYOnVqtG3btkzXUd7Z0rNnz3j00UfjxhtvzNp5f/DBB6NDhw4xffr0dTKOgudblSpVyrVEAErXihk1aNCgePHFF2PfffeN/fbbLz7//PPIz88v9fUWHAVeUuVxEM+KH/ZNnjw5HnrooejTp88qD7pZlzk9e/bsOOCAA6Jy5crx4YcfRps2bbJuv+yyy+Kuu+4q0zFMnTq1TPd/I8qvXyjQs2fPIovsBx98cJ3t/0b877lV0g+CKFsOqVsPffjhh9GjR4+oXbt21KxZM/bcc8946623Cs338ccfR+fOnSM/Pz+aNWsWl156aQwbNixycnKyTjVQ1Pmxbrrppthqq62ievXqUbdu3ejYsWM8+OCDEfHb10HOPffciIho2bJl5itABcss6hyIs2fPjjPPPDNatGgReXl50axZszjyyCPXaKehYcOG0aZNm5gwYULW9GXLlsX1118fW221VVSrVi0aN24cJ5xwQsyaNavQfBdffHFsuOGGUb169ejatWt89tlnhcZd8DWxf//73zFw4MBo1KhRNGvWLHP7008/HbvvvnvUqFEjatWqFb169YpPP/00a12TJ0+Oo446Kpo1axZ5eXnRtGnT2H///bMe//feey+6d+8eDRo0iPz8/GjZsmUcffTRWcsp6hxWxXkeFNyH119/Pc4666xo2LBh1KhRIw444ICYNm3aah/rIUOGRE5OTjzwwANZJXaBjh07Zj1mCxYsiLPPPjtzCpItttgirr766kiSpND9OeWUU+KJJ56IrbfeOvLy8mKrrbaKZ555JjPPgAEDonPnzhERcfDBB0dOTk7mebqyc7oVdW6rhx9+ODp06BC1atWK2rVrR7t27eKGG27I3L6yc2Q/+uij0aFDh8jPz48GDRrE4YcfXuir/gMGDIiaNWvGDz/8EH369ImaNWtGw4YN45xzzinRKVcOO+yweOSRR7I+Bf7Xv/4VCxcuLLLE+uabb2LgwIGxxRZbRH5+ftSvXz8OPvjgrOfV8OHD4+CDD46IiK5du2ZepwX3s0WLFrHvvvvGs88+Gx07doz8/Py44447MrcV/F2TJImuXbtGw4YNMx8sREQsXrw42rVrF61atYoFCxYU+74Cq7f77rtHRGTl3OLFi+Oiiy6KDh06RJ06daJGjRqx++67x0svvZT1uwXnyrz66qvjzjvvjFatWkVeXl5sv/328e677xZaV8F2uFq1arH11lvH448/XuSYSrp9f/TRR6Nt27aRn58fO++8c3zyyScREXHHHXfEZpttFtWqVYsuXbqU6qmPXnzxxUwub7DBBrH//vvH559/njVPwVdaP/vss+jXr1/UrVs3qzi+//77M9v+evXqxaGHHlroq69ffvllHHTQQdGkSZOoVq1aNGvWLA499NCYM2dO5jFYsGBB3HfffZlt76rODf3YY4/FRx99FH/5y18KldgREbVr147LLrssa1ppZVRBBk6cODGefPLJrPd0Be8hVvwbFZWbq3tMIop+f/j111/HwQcfHPXq1Yvq1avHTjvtFE8++WSR6/vHP/4Rl112WTRr1iyqVasWe+65Z3z11VcrfVxXdNhhh8WMGTNi7NixmWmLFy+OkSNHRr9+/Yr8nauvvjp22WWXqF+/fuTn50eHDh0KneprVX/vVT3fVjxHdsF79HvvvTdr+Zdffnnk5OTEU089Vez7CqTDHnvsERdeeGF88803cf/992fd9sUXX0Tfvn2jXr16Ua1atejYsWOMHj260DJWtx9d1Dmyi7MPWtT+1NSpU+OYY46Jxo0bR7Vq1aJ9+/Zx3333Zc1T0vcZJVWQXRMmTIiePXtGrVq14o9//GNEFH9/P6J4++pFueOOO+KHH36Ia6+9tlCJHRHRuHHjuOCCC7Km3XrrrbHVVltFXl5ebLjhhnHyyScXOv1Ily5dYuutt47PPvssunbtGtWrV4+NNtoorrzyysw8BbmbJEnccsstmUyJWPl1FYrK6jT3CwX69esX48aNiy+++CIzbfLkyfHiiy8WmcnFeR88adKkaNiwYUT8r8dY/n6u6rm1Yo8wePDgqFSpUrzwwgtZ4yj4xtxHH31U7PtKyfmYfz3z6aefxu677x61a9eOP/3pT1G1atW44447okuXLvHvf/87dtxxx4iI+OGHHzLl1aBBg6JGjRpx9913F+tomLvuuitOO+206Nu3b5x++unxyy+/xMcffxxvv/129OvXLw488MD473//W+hrQAUbjRXNnz8/dt999/j888/j6KOPjj/84Q8xffr0GD16dHz//fdZXyMqjiVLlsT3338fdevWzZp+wgknxPDhw+Ooo46K0047LSZOnBg333xzfPjhh/H6669nPmUbNGhQXHnlldG7d+/o3r17fPTRR9G9e/eVnr5h4MCB0bBhw7jooosyhd2IESOif//+0b1797jiiiti4cKFcdttt8Vuu+0WH374YWYjeNBBB8Wnn34ap556arRo0SKmTp0aY8eOjW+//Tbz89577x0NGzaM888/PzbYYIOYNGnSar9SU9znQYFTTz016tatG4MHD45JkybF9ddfH6eccko88sgjK13HwoUL44UXXohOnTrFJptsssrxRPxWeO63337x0ksvxTHHHBPbbrttPPvss3HuuefGDz/8ENddd13W/K+99lqMGjUqBg4cGLVq1Yobb7wxDjrooPj222+jfv36ccIJJ8RGG20Ul19+eZx22mmx/fbbR+PGjVc7juWNHTs2DjvssNhzzz0zR7N9/vnn8frrr8fpp5++0t8reB5tv/32MXTo0JgyZUrccMMN8frrr8eHH36Y9Qn50qVLo3v37rHjjjvG1VdfHc8//3xcc8010apVqzjppJOKNc5+/fplzuW1xx57RMRvn0bvueee0ahRo0Lzv/vuu/HGG2/EoYceGs2aNYtJkybFbbfdFl26dInPPvssqlevHp06dYrTTjstbrzxxvjzn/8cW265ZURE5r8Rv33N+7DDDosTTjghjjvuuNhiiy0Kratgp3qbbbaJE088MfPcHDx4cHz66afx8ssvl+uRjLA+KtgZWT7n5s6dG3fffXccdthhcdxxx8W8efPinnvuie7du8c777wT2267bdYyHnzwwZg3b16ccMIJkZOTE1deeWUceOCB8fXXX2fy8LnnnouDDjoo2rZtG0OHDo0ZM2ZkdnyXV9Lt+6uvvhqjR4+Ok08+OSIihg4dGvvuu2/86U9/iltvvTUGDhwYs2bNiiuvvDKOPvroePHFF4v1uMyZM6fQB+AF7yGef/756NGjR2y66aZx8cUXx88//xw33XRT7LrrrvHBBx8U+pDz4IMPjtatW8fll1+eKeMvu+yyuPDCC+OQQw6JY489NqZNmxY33XRTdOrUKbPtX7x4cXTv3j0WLVoUp556ajRp0iR++OGHGDNmTMyePTvq1KkTI0aMiGOPPTZ22GGHOP744yPit2/frExBcVHc81KXZkZtueWWMWLEiDjzzDOjWbNmmVO5rew9XVGK85gUZcqUKbHLLrvEwoUL47TTTov69evHfffdF/vtt1+MHDkyDjjggKz5//a3v0WlSpXinHPOiTlz5sSVV14Zf/zjH+Ptt98u1jhbtGgRO++8czz00EPRo0ePiPit6JgzZ04ceuihceONNxb6nRtuuCH222+/+OMf/xiLFy+Ohx9+OA4++OAYM2ZM9OrVKyKiWH/vop5vKzrqqKNi1KhRcdZZZ8Vee+0VG2+8cXzyyScxZMiQOOaYY6Jnz57Fup9AuhxxxBHx5z//OZ577rnMt4k//fTT2HXXXWOjjTaK888/P2rUqBH/+Mc/ok+fPvHYY49ltn9ruh+9un3Qovz888/RpUuX+Oqrr+KUU06Jli1bxqOPPhoDBgyI2bNnF9p3Ks77jDW1ZMmS6N69e+y2225x9dVXR/Xq1SOi+Pv7xd1XL8ro0aMjPz8/+vbtW6yxXnzxxTFkyJDo1q1bnHTSSTF+/Pi47bbb4t13380aU0TErFmzYp999okDDzwwDjnkkBg5cmScd9550a5du+jRo0d06tQpc52KvfbaK4488sgSP3Zp7heW16lTp2jWrFk8+OCD8de//jUiIh555JGoWbNmJl+XV5z3wQ0bNozbbrstTjrppDjggAPiwAMPjIjIOq3Pyp5bK7rgggviX//6VxxzzDHxySefRK1ateLZZ5+Nu+66Ky655JJo3759se4nayihwhg2bFgSEcm777670nn69OmT5ObmJhMmTMhM+/HHH5NatWolnTp1ykw79dRTk5ycnOTDDz/MTJsxY0ZSr169JCKSiRMnZqZ37tw56dy5c+bn/fffP9lqq61WOdarrrqq0HIKNG/ePOnfv3/m54suuiiJiGTUqFGF5l22bNkq19O8efNk7733TqZNm5ZMmzYt+eSTT5IjjjgiiYjk5JNPzsz36quvJhGRPPDAA1m//8wzz2RNnzx5clKlSpWkT58+WfNdfPHFSURkjbvg77HbbrslS5YsyUyfN29essEGGyTHHXdc1jImT56c1KlTJzN91qxZSUQkV1111Urv3+OPP77av3mSJElEJIMHD878XNznQcF96NatW9ZjfeaZZyaVK1dOZs+evdJ1fvTRR0lEJKeffvoqx1bgiSeeSCIiufTSS7Om9+3bN8nJyUm++uqrrPuTm5ubNa1gfTfddFNm2ksvvZRERPLoo49mLXPF52yB/v37J82bN8/8fPrppye1a9fO+vutqGAdL730UpIkSbJ48eKkUaNGydZbb538/PPPmfnGjBmTRERy0UUXZa0vIpK//vWvWcvcbrvtkg4dOqx0ncvfj4LXWseOHZNjjjkmSZLfnju5ubnJfffdV+RjsHDhwkLLevPNN5OISP7+979npj366KNZ9215zZs3TyIieeaZZ4q8bfnXQpIkyR133JFERHL//fcnb731VlK5cuXkjDPOWO19BFauYBv9/PPPJ9OmTUu+++67ZOTIkUnDhg2TvLy85LvvvsvMu2TJkmTRokVZvz9r1qykcePGydFHH52ZNnHixCQikvr16yczZ87MTP/nP/+ZRETyr3/9KzNt2223TZo2bZqVBc8991wSEVnb0pJu3/Py8rLeHxRsP5o0aZLMnTs3M33QoEErfS9R1ONU1L/l70ujRo2SGTNmZKZ99NFHSaVKlZIjjzwyM23w4MFJRCSHHXZY1jomTZqUVK5cObnsssuypn/yySdJlSpVMtM//PDDInNpRTVq1Ci0HV2Z7bbbLqlTp06x5i2rjGrevHnSq1evrGkFj/uKf58Vc7O4j8mK2XLGGWckEZG8+uqrmWnz5s1LWrZsmbRo0SJZunRp1vq23HLLrNfADTfckERE8sknn6xyvcu/v7755puTWrVqZXL04IMPTrp27brSx2DFvF28eHGy9dZbJ3vssUfW9JX9vVf2fFv+tuX99NNPSb169ZK99torWbRoUbLddtslm2yySTJnzpxV3keg/BRnH75OnTrJdtttl/l5zz33TNq1a5f88ssvmWnLli1Ldtlll6R169aZacXZjy7I/WHDhiVJUrx90CQpvD91/fXXZ97rF1i8eHGy8847JzVr1szkd0neZ6xOUZ1CQXadf/75WfMWd3+/uPvqK1O3bt2kffv2xRr/1KlTk9zc3GTvvffOZFaSJMnNN9+cRERy7733ZqZ17ty50L7aokWLkiZNmiQHHXRQ1nJX7DqSpOjMSJLCWZ3mfmH5+zFt2rTknHPOSTbbbLPMbdtvv31y1FFHFfkYFPd98LRp0wrdtwIre24V3Lb8e98k+e09YG5ubnLssccms2bNSjbaaKOkY8eOya+//rrK+8jac2qR9cjSpUvjueeeiz59+sSmm26amd60adPo169fvPbaazF37tyIiHjmmWdi5513zjpCq169epmvTqzKBhtsEN9//32pfDUo4revzLZv377QkTURUeTXY1b03HPPRcOGDaNhw4bRrl27GDFiRBx11FFx1VVXZeZ59NFHo06dOrHXXnvF9OnTM/86dOgQNWvWzHzl5IUXXoglS5bEwIEDs9Zx6qmnrnT9xx13XFSuXDnz89ixY2P27Nlx2GGHZa2rcuXKseOOO2bWlZ+fH7m5ufHyyy8X+XWniP+d+3nMmDHx66+/rvaxiCjZ86DA8ccfn/VY77777rF06dL45ptvVrqegmUUdUqRojz11FNRuXLlOO2007Kmn3322ZEkSTz99NNZ07t165Z1xNI222wTtWvXjq+//rpY6yuODTbYIBYsWJD1NeLVee+992Lq1KkxcODArHOH9erVK9q0aVPoK88RESeeeGLWz7vvvnuJ70e/fv1i1KhRma85V65cucjXTERknV/v119/jRkzZsRmm20WG2ywQXzwwQfFXmfLli2je/fuxZr3+OOPj+7du8epp54aRxxxRLRq1Souv/zyYq8LWLlu3bpFw4YNY+ONN46+fftGjRo1YvTo0VlHRleuXDlzPstly5bFzJkzY8mSJdGxY8ciX/f/93//l3VEd8HpSgq2TT/99FOMGzcu+vfvn3XE7F577VXoXMkl3b7vueeeWUc7FRzFc9BBB2VlSsH04m4vb7nllhg7dmzWv+Xvy4ABA6JevXqZ+bfZZpvYa6+9ijwlw4rb7VGjRsWyZcvikEMOycr2Jk2aROvWrTPZXvBYPfvss7Fw4cJijXt15s6dW+ysLa+MWpU1fUyeeuqp2GGHHbJOp1KzZs04/vjjY9KkSfHZZ59lzX/UUUdlndN1xed0cRxyyCHx888/x5gxY2LevHkxZsyYlZ5WJCI7b2fNmhVz5syJ3XffvURZG1H4b7AyTZo0yTzPd9999xg3blzce++9Ubt27RKtD0iXmjVrxrx58yIiYubMmfHiiy/GIYccEvPmzcvkzYwZM6J79+7x5ZdfZk4VtSb70cXZBy3KU089FU2aNInDDjssM61q1apx2mmnxfz58+Pf//531vyre5+xtlb8Zmtx9/eLu6++MiXJ5Oeffz4WL14cZ5xxRtbFjI877rioXbt2oUyuWbNm1rW/cnNzY4cddij1/d+IdPYLK+rXr1989dVX8e6772b+u7JMLun74FUp7remt9566xgyZEjcfffd0b1795g+fXrcd999rm+xDiiy1yPTpk2LhQsXFvn1/y233DKWLVuWOY/jN998E5tttlmh+YqatqLzzjsvatasGTvssEO0bt06Tj755Hj99dfXeNwTJkyIrbfeeo1/f8cdd4yxY8fGM888E1dffXVssMEGMWvWrKyd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NGiw2ovStmrVKpIkiZYtWxaZ7TvttFPW/O3atYsLLrggXnnllXj11Vfjhx9+iNtvvz1ze0m2v717946I33bSVmddZlTB0VUrZsvKtv2re0xW1Lx585X+zQpuLwsHHHBAVKpUKd56661Vnlbksccei2rVqmVKgB49emQOrFhRaebtySefHPPmzYuhQ4fGa6+9Ftdff32pLRtY90aMGBERkSmtC07dULVq1SLzplu3bpmjt9dmP7o4+6DLa968eXz55ZeFDopJS9YXd3+/pPvqK+rdu3f8/PPPqzyoqMDKMnnx4sUxceLEcs3kNPYLRenXr1/89NNP8d///neVmVzc98GlmcfLli2LAQMGRO3atePPf/5zPPTQQ6u9aCalQ5G9HqlcuXLsvffe8c9//jMmTZqUmT5lypR48MEHY7fddsucDqJ79+7x5ptvxrhx4zLzzZw5c6WfYC5vxowZWT/n5uZG27ZtI0mSzHmWCnYIiyoTV3TQQQfFRx99FI8//nih29b0E9vzzjsvZsyYEXfddVdE/HbOw6VLl8Yll1xSaN4lS5ZkxrnnnntGlSpV4rbbbsuaZ/myYHW6d+8etWvXjssvv7zI805NmzYtIiIWLlxYaMPaqlWrqFWrVuao1lmzZhV6DArOa76yr/+U5HmwtgYPHhxJksQRRxwR8+fPL3T7+++/nzmyuWfPnrF06dJCj+V1110XOTk50aNHj1IZU8Rvj+MXX3yReawjIj766KNCp8BZ8blcqVKlzFWLV/b4duzYMRo1ahS333571jxPP/10fP7550VeRbm09O3bNwYPHhy33nrrKo8AqFy5cqHnzU033VToE/mSvE5X57jjjotly5bFPffcE3feeWdUqVIljjnmmHI5khLWd126dIkddtghrr/++kyOFBz5svxr7u23344333xzjdbRtGnT2HbbbeO+++7L+krm2LFjC52beF1u39fE8vdl+e3df/7zn3juuedW+cFggQMPPDAqV64cQ4YMKbRdS5Ikkydz586NJUuWZN3erl27qFSpUlZm1KhRo9jb3r59+0a7du3isssuK/LvOW/evPjLX/4SEes2owrKgFdeeSUzbenSpXHnnXdmzVfcx2RFPXv2jHfeeSfrPi9YsCDuvPPOaNGiRZl9fbdmzZpx2223xcUXX5z5EKEolStXjpycnKxsnTRpUjzxxBOF5i3J33tVRo4cGY888kj87W9/i/PPPz8OPfTQuOCCC+K///3vWi8bWPdefPHFuOSSS6Jly5aZa1U1atQounTpEnfccUf89NNPhX5n+f2bNdmPLs4+aFF69uwZkydPjkceeSQzbcmSJXHTTTdFzZo1o3Pnzqu+s2WsuPv7xd1XX5kTTzwxmjZtGmeffXaR296pU6fGpZdeGhG/XeMkNzc3brzxxqy/xz333BNz5swp80xesGBBoW8Zp71fWFGrVq3i+uuvj6FDh8YOO+yw0vmK+z64evXqEVE6+7/XXnttvPHGG3HnnXfGJZdcErvsskucdNJJMX369LVeNqvm1CIV0L333lvkeXxPP/30uPTSS2Ps2LGx2267xcCBA6NKlSpxxx13xKJFi+LKK6/MzPunP/0p7r///thrr73i1FNPjRo1asTdd98dm2yyScycOXOVn1Ttvffe0aRJk9h1112jcePG8fnnn8fNN98cvXr1ynw63KFDh4iI+Mtf/hKHHnpoVK1aNXr37l3kEU/nnntujBw5Mg4++OA4+uijo0OHDjFz5swYPXp03H777ZlPT0uiR48esfXWW8e1114bJ598cnTu3DlOOOGEGDp0aIwbNy723nvvqFq1anz55Zfx6KOPxg033BB9+/aNxo0bx+mnnx7XXHNN7LfffrHPPvvERx99FE8//XQ0aNCgWJ/g1a5dO2677bY44ogj4g9/+EMceuih0bBhw/j222/jySefjF133TVuvvnm+O9//xt77rlnHHLIIdG2bduoUqVKPP744zFlypQ49NBDI+K38zzdeuutccABB0SrVq1i3rx5cdddd632iNziPg/W1i677BK33HJLDBw4MNq0aRNHHHFEtG7dOubNmxcvv/xyjB49OhPkvXv3jq5du8Zf/vKXmDRpUrRv3z6ee+65+Oc//xlnnHFG1oUd19bRRx8d1157bXTv3j2OOeaYmDp1atx+++2x1VZbZV2I4thjj42ZM2fGHnvsEc2aNYtvvvkmbrrppth2220z53tbUdWqVeOKK66Io446Kjp37hyHHXZYTJkyJW644YZo0aJFnHnmmaV2P1ZUp06duPjii1c737777hsjRoyIOnXqRNu2bePNN9+M559/PurXr58137bbbhuVK1eOK664IubMmRN5eXmxxx57RKNGjUo0rmHDhsWTTz4Zw4cPz3xF/KabborDDz88brvttkIXTwXW3rnnnhsHH3xwDB8+PE488cTYd999Y9SoUXHAAQdEr169YuLEiXH77bdH27Zti/ygsTiGDh0avXr1it122y2OPvromDlzZtx0002x1VZbZS1zXW7f19RVV10VPXr0iJ133jmOOeaY+Pnnn+Omm24q9na1VatWcemll8agQYNi0qRJ0adPn6hVq1ZMnDgxHn/88Tj++OPjnHPOiRdffDFOOeWUOPjgg2PzzTePJUuWxIgRI6Jy5cpx0EEHZZbXoUOHeP755+Paa6+NDTfcMFq2bJm5uOWKqlatGqNGjYpu3bpFp06d4pBDDoldd901qlatGp9++mk8+OCDUbdu3bjsssvWaUZttdVWsdNOO8WgQYNi5syZUa9evXj44YcLldbFfUxWdP7558dDDz0UPXr0iNNOOy3q1asX9913X0ycODEee+yxMj2dRv/+/Vc7T69eveLaa6+NffbZJ/r16xdTp06NW265JTbbbLP4+OOPs+Ytyd97ZaZOnRonnXRSdO3aNU455ZSI+O1Ai5deeikGDBgQr732mlOMQIo9/fTT8cUXX8SSJUtiypQp8eKLL8bYsWOjefPmMXr06KwL9N5yyy2x2267Rbt27eK4446LTTfdNKZMmRJvvvlmfP/99/HRRx9FxJrtRxdnH7Qoxx9/fNxxxx0xYMCAeP/996NFixYxcuTIeP311+P6668v9gUQy0px9/eLu6++MnXr1o3HH388evbsGdtuu20cfvjhme7jgw8+iIceeihzesWGDRvGoEGDYsiQIbHPPvvEfvvtF+PHj49bb701tt9++6wLO66tvffeOzbZZJM45phj4txzz43KlSvHvffem7lvBdLeLxTl9NNPX+08xX0fnJ+fH23bto1HHnkkNt9886hXr15svfXWJT7X/Oeffx4XXnhhDBgwIPOh9/Dhw2PbbbeNgQMHxj/+8Y+S3UlKJqHCGDZsWBIRK/333XffJUmSJB988EHSvXv3pGbNmkn16tWTrl27Jm+88Uah5X344YfJ7rvvnuTl5SXNmjVLhg4dmtx4441JRCSTJ0/OzNe5c+ekc+fOmZ/vuOOOpFOnTkn9+vWTvLy8pFWrVsm5556bzJkzJ2v5l1xySbLRRhsllSpVSiIimThxYpIkSdK8efOkf//+WfPOmDEjOeWUU5KNNtooyc3NTZo1a5b0798/mT59+iofk+bNmye9evUq8rbhw4cnEZEMGzYsM+3OO+9MOnTokOTn5ye1atVK2rVrl/zpT39Kfvzxx8w8S5YsSS688MKkSZMmSX5+frLHHnskn3/+eVK/fv3kxBNPLPT3ePfdd4tc/0svvZR07949qVOnTlKtWrWkVatWyYABA5L33nsvSZIkmT59enLyyScnbdq0SWrUqJHUqVMn2XHHHZN//OMfmWV88MEHyWGHHZZssskmSV5eXtKoUaNk3333zSyjQEQkgwcPzppWnOfByu7DSy+9lERE8tJLLxV531b0/vvvJ/369Us23HDDpGrVqkndunWTPffcM7nvvvuSpUuXZuabN29ecuaZZ2bma926dXLVVVcly5YtK3R/Tj755ELrWfG5UzDORx99tNC8999/f7Lpppsmubm5ybbbbps8++yzSf/+/ZPmzZtn5hk5cmSy9957J40aNUpyc3OTTTbZJDnhhBOSn376abWPxSOPPJJst912SV5eXlKvXr3kj3/8Y/L9999nzdO/f/+kRo0ahcY2ePDgpDib386dOydbbbXVKucp6jGYNWtWctRRRyUNGjRIatasmXTv3j354osvinzt3XXXXcmmm26aVK5cOet+ruq1tfxyvvvuu6ROnTpJ7969C813wAEHJDVq1Ei+/vrr1d5XoLBV5czSpUuTVq1aJa1atUqWLFmSLFu2LLn88suT5s2bJ3l5ecl2222XjBkzptB2b+LEiUlEJFdddVWhZRaVJY899liy5ZZbJnl5eUnbtm2TUaNGFVpmkqzd9n1lY1rVNr64j9Pynn/++WTXXXdN8vPzk9q1aye9e/dOPvvss6x5CrbP06ZNK3IZjz32WLLbbrslNWrUSGrUqJG0adMmOfnkk5Px48cnSZIkX3/9dXL00UcnrVq1SqpVq5bUq1cv6dq1a/L8889nLeeLL75IOnXqlOTn5ycRUWjbXJRZs2YlF110UdKuXbukevXqSbVq1ZKtt946GTRoUFZuJUnpZ9TKMmHChAlJt27dkry8vKRx48bJn//852Ts2LFZeVLcx6SojJowYULSt2/fZIMNNkiqVauW7LDDDsmYMWOy5lnZ86TgebX8+8CiFPf5U9RjcM899yStW7dO8vLykjZt2iTDhg0r8vFb2d97Vc+3FZdz4IEHJrVq1UomTZqUNd8///nPJCKSK664YpXjB8rHivvwubm5SZMmTZK99torueGGG5K5c+cW+XsTJkxIjjzyyKRJkyZJ1apVk4022ijZd999k5EjR2bNt7r96BW3hcXZB02Swh1AkiTJlClTMvsYubm5Sbt27QptY0v6PmNVrrrqqqweIUlWnl0FirO/nySr31dfnR9//DE588wzk8033zypVq1aUr169aRDhw7JZZddVqgXufnmm5M2bdokVatWTRo3bpycdNJJyaxZs7LmWdl+X1HvuVa2r/z+++8nO+64Y2a/9tprr808/woew7T3C6t7H7ayx6C474OTJEneeOONpEOHDklubm7W/VzVc2v55SxZsiTZfvvtk2bNmiWzZ8/Omu+GG25IIiJ55JFHVjl+1k5OkvjeN/9zxhlnxB133BHz588vtYvUrQ9mz54ddevWjUsvvTTz9V0AAAAAYN3w/bPfsZ9//jnr5xkzZsSIESNit912+12X2Cs+LhGRuZDO6i7+AAAAAACUPufI/h3beeedo0uXLrHlllvGlClT4p577om5c+fGhRdeWN5DK1ePPPJIDB8+PHr27Bk1a9aM1157LR566KHYe++9Y9dddy3v4QEAAADA744i+3esZ8+eMXLkyLjzzjsjJycn/vCHP8Q999wTnTp1Ku+hlattttkmqlSpEldeeWXMnTs3cwHIgosWAgAAAADrlnNkAwAAAACQas6RDQAAAABAqimyAQAAAABINUU2AAAAAACptl5e7DF/u1PKewhQocx69+byHgJUONXWywRd92Q2lIzMhpKR16VDXkPJyGsomeLmtSOyAQAAAABINUU2AAAAAACppsgGAAAAACDVFNkAAAAAAKSaIhsAAAAAgFRTZAMAAAAAkGqKbAAAAAAAUk2RDQAAAABAqimyAQAAAABINUU2AAAAAACppsgGAAAAACDVFNkAAAAAAKSaIhsAAAAAgFRTZAMAAAAAkGqKbAAAAAAAUk2RDQAAAABAqimyAQAAAABINUU2AAAAAACppsgGAAAAACDVFNkAAAAAAKSaIhsAAAAAgFRTZAMAAAAAkGqKbAAAAAAAUk2RDQAAAABAqimyAQAAAABINUU2AAAAAACppsgGAAAAACDVFNkAAAAAAKSaIhsAAAAAgFRTZAMAAAAAkGqKbAAAAAAAUk2RDQAAAABAqimyAQAAAABINUU2AAAAAACp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AAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUy0mSJCnvQfD7sGjRohg6dGgMGjQo8vLyyns4kHpeM0B5sO2BkvGaAcqL7Q+UjNdMxafIZp2ZO3du1KlTJ+bMmRO1a9cu7+FA6nnNAOXBtgdKxmsGKC+2P1AyXjMVn1OLAAAAAACQaopsAAAAAABSTZENAAAAAECqKbJZZ/Ly8mLw4MFOqA/F5DUDlAfbHigZrxmgvNj+QMl4zVR8LvYIAAAAAECqOSIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopslknbrnllmjRokVUq1Ytdtxxx3jnnXfKe0iQWq+88kr07t07Ntxww8jJyYknnniivIcE/I7IbCgeeQ2UJ3kNxSez1x+KbMrcI488EmeddVYMHjw4Pvjgg2jfvn107949pk6dWt5Dg1RasGBBtG/fPm655ZbyHgrwOyOzofjkNVBe5DWUjMxef+QkSZKU9yBYv+24446x/fbbx8033xwREcuWLYuNN944Tj311Dj//PPLeXSQbjk5OfH4449Hnz59ynsowO+AzIY1I6+BdUlew5qT2RWbI7IpU4sXL473338/unXrlplWqVKl6NatW7z55pvlODIAYHkyGwDST14Dv2eKbMrU9OnTY+nSpdG4ceOs6Y0bN47JkyeX06gAgBXJbABIP3kN/J4psgEAAAAASDVFNmWqQYMGUbly5ZgyZUrW9ClTpkSTJk3KaVQAwIpkNgCkn7wGfs8U2ZSp3Nzc6NChQ7zwwguZacuWLYsXXnghdt5553IcGQCwPJkNAOknr4HfsyrlPQDWf2eddVb0798/OnbsGDvssENcf/31sWDBgjjqqKPKe2iQSvPnz4+vvvoq8/PEiRNj3LhxUa9evdhkk03KcWTA+k5mQ/HJa6C8yGsoGZm9/shJkiQp70Gw/rv55pvjqquuismTJ8e2224bN954Y+y4447lPSxIpZdffjm6du1aaHr//v1j+PDh635AwO+KzIbikddAeZLXUHwye/2hyAYAAAAAINWcIxsAAAAAgFRTZAMAAAAAkGqKbAAAAAAAUk2RDQAAAABAqimyAQAAAABINUU2AAAAAACppsgGAAAAACDVFNkAAAAAAKSaIht+ZwYMGBB9+vTJ/NylS5c444wz1vk4Xn755cjJyYnZs2ev83UDQNrJawCoGGQ2rDuKbEiJAQMGRE5OTuTk5ERubm5sttlm8de//jWWLFlSpusdNWpUXHLJJcWaVzAC8HsnrwGgYpDZsP6pUt4DAP5nn332iWHDhsWiRYviqaeeipNPPjmqVq0agwYNyppv8eLFkZubWyrrrFevXqksBwB+L+Q1AFQMMhvWL47IhhTJy8uLJk2aRPPmzeOkk06Kbt26xejRozNfVbrssstiww03jC222CIiIr777rs45JBDYoMNNoh69erF/vvvH5MmTcosb+nSpXHWWWfFBhtsEPXr148//elPkSRJ1jpX/NrTokWL4rzzzouNN9448vLyYrPNNot77rknJk2aFF27do2IiLp160ZOTk4MGDAgIiKWLVsWQ4cOjZYtW0Z+fn60b98+Ro4cmbWep556KjbffPPIz8+Prl27Zo0TACoSeQ0AFYPMhvWLIhtSLD8/PxYvXhwRES+88EKMHz8+xo4dG2PGjIlff/01unfvHrVq1YpXX301Xn/99ahZs2bss88+md+55pprYvjw4XHvvffGa6+9FjNnzozHH398les88sgj46GHHoobb7wxPv/887jjjjuiZs2asfHGG8djjz0WERHjx4+Pn376KW644YaIiBg6dGj8/e9/j9tvvz0+/fTTOPPMM+Pwww+Pf//73xHx25uBAw88MHr37h3jxo2LY489Ns4///yyetgAYJ2S1wBQMchsqOASIBX69++f7L///kmSJMmyZcuSsWPHJnl5eck555yT9O/fP2ncuHGyaNGizPwjRoxItthii2TZsmWZaYsWLUry8/OTZ599NkmSJGnatGly5ZVXZm7/9ddfk2bNmmXWkyRJ0rlz5+T0009PkiRJxo8fn0REMnbs2CLH+NJLLyURkcyaNSsz7ZdffkmqV6+evPHGG1nzHnPMMclhhx2WJEmSDBo0KGnbtm3W7eedd16hZQFA2slrAKgYZDasf5wjG1JkzJgxUbNmzfj1119j2bJl0a9fv7j44ovj5JNPjnbt2mWds+ujjz6Kr776KmrVqpW1jF9++SUmTJgQc+bMiZ9++il23HHHzG1VqlSJjh07FvrqU4Fx48ZF5cqVo3PnzsUe81dffRULFy6MvfbaK2v64sWLY7vttouIiM8//zxrHBERO++8c7HXAQBpIq8BoGKQ2bB+UWRDinTt2jVuu+22yM3NjQ033DCqVPnfS7RGjRpZ886fPz86dOgQDzzwQKHlNGzYcI3Wn5+fX+LfmT9/fkREPPnkk7HRRhtl3ZaXl7dG4wCANJPXAFAxyGxYvyiyIUVq1KgRm222WbHm/cMf/hCPPPJINGrUKGrXrl3kPE2bNo233347OnXqFBERS5Ysiffffz/+8Ic/FDl/u3btYtmyZfHvf/87unXrVuj2gk+rly5dmpnWtm3byMvLi2+//XalnzJvueWWMXr06Kxpb7311urvJACkkLwGgIpBZsP6xcUeoYL64x//GA0aNIj9998/Xn311Zg4cWK8/PLLcdppp8X3338fERGnn356/O1vf4snnngivvjiixg4cGDMnj17pcts0aJF9O/fP44++uh44oknMsv8xz/+ERERzZs3j5ycnBgzZkxMmzYt5s+fH7Vq1YpzzjknzjzzzLjvvvtiwoQJ8cEHH8RNN90U9913X0REnHjiifHll1/GueeeG+PHj48HH3wwhg8fXtYPEQCUO3kNABWDzIb0U2RDBVW9evV45ZVXYpNNNokDDzwwttxyyzjmmGPil19+yXx6fPbZZ8cRRxwR/fv3j5133jlq1aoVBxxwwCqXe9ttt0Xfvn1j4MCB0aZNmzjuuONiwYIFERGx0UYbxZAhQ+L888+Pxo0bxymnnBIREZdccklceOGFMXTo0Nhyyy1jn332iSeffDJatmwZERGbbLJJPPbYY/HEE09E+/bt4/bbb4/LL7+8DB8dAEgHeQ0AFYPMhvTLSVZ2RnoAAAAAAEgBR2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKopsgEAAAAASDVFNgAAAAAAqabIBgAAAAAg1RTZAAAAAACkmiIbAAAAAIBUU2QDAAAAAJBqimwAAAAAAFJNkQ0AAAAAQKr9P59SggfJzDWnAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 1800x600 with 3 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.cluster import DBSCAN\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, confusion_matrix, classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_excel(\"IBM_Telco_dataset.xlsx\")\n",
        "df = df.dropna()\n",
        "\n",
        "# Step 1: Feature Engineering\n",
        "# Create new features\n",
        "df['TenureGroup'] = pd.cut(df['tenure'], bins=[0, 12, 24, 36, 48, 60, np.inf], labels=[1, 2, 3, 4, 5, 6])\n",
        "df['TotalServices'] = (df[['PhoneService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n",
        "                           'TechSupport', 'StreamingTV', 'StreamingMovies']] == 'Yes').sum(axis=1)\n",
        "df['ChargesRatio'] = df['MonthlyCharges'] / df['TotalCharges']\n",
        "\n",
        "# Drop original columns if needed\n",
        "df = df.drop(columns=['tenure', 'customerID'])\n",
        "\n",
        "# Step 2: Train-test split\n",
        "X = df.drop(columns=[\"Churn\"])\n",
        "y = df[\"Churn\"]\n",
        "\n",
        "# Label Encoding for Target Variable\n",
        "label_encoder = LabelEncoder()\n",
        "y = label_encoder.fit_transform(y)\n",
        "\n",
        "# Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "\n",
        "# Step 3: Preprocessing\n",
        "# Identify categorical and numerical columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "\n",
        "# Preprocessing pipeline\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"num\", StandardScaler(), numeric_cols),\n",
        "        (\"cat\", OneHotEncoder(drop=\"first\", sparse_output=False, handle_unknown='ignore'), categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Fit and transform the training data\n",
        "X_train_preprocessed = preprocessor.fit_transform(X_train)\n",
        "X_test_preprocessed = preprocessor.transform(X_test)\n",
        "\n",
        "# Step 4: Customer Segmentation with DBSCAN\n",
        "# Use DBSCAN to cluster customers\n",
        "dbscan = DBSCAN(eps=0.5, min_samples=5)  # Adjust eps and min_samples as needed\n",
        "clusters = dbscan.fit_predict(X_train_preprocessed)\n",
        "\n",
        "# Add cluster labels to the training data\n",
        "X_train['Cluster'] = clusters\n",
        "X_test['Cluster'] = dbscan.fit_predict(X_test_preprocessed)\n",
        "\n",
        "# Step 5: Train Classification Models for Each Cluster\n",
        "# Initialize models\n",
        "rf_model = RandomForestClassifier(random_state=42, class_weight='balanced')\n",
        "xgb_model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss')\n",
        "\n",
        "# Train models for each cluster\n",
        "cluster_models = {}\n",
        "for cluster in X_train['Cluster'].unique():\n",
        "    # Filter data for the current cluster\n",
        "    cluster_train_mask = X_train['Cluster'] == cluster\n",
        "    cluster_test_mask = X_test['Cluster'] == cluster\n",
        "\n",
        "    # Train Random Forest\n",
        "    rf_model.fit(X_train_preprocessed[cluster_train_mask], y_train[cluster_train_mask])\n",
        "    cluster_models[f'RF_Cluster_{cluster}'] = rf_model\n",
        "\n",
        "    # Train XGBoost\n",
        "    xgb_model.fit(X_train_preprocessed[cluster_train_mask], y_train[cluster_train_mask])\n",
        "    cluster_models[f'XGB_Cluster_{cluster}'] = xgb_model\n",
        "\n",
        "# Step 6: Evaluate Models on Test Data\n",
        "# Initialize evaluation metrics\n",
        "rf_y_pred_proba = np.zeros(len(X_test))\n",
        "xgb_y_pred_proba = np.zeros(len(X_test))\n",
        "\n",
        "for cluster in X_train['Cluster'].unique():\n",
        "    # Filter test data for the current cluster\n",
        "    cluster_test_mask = X_test['Cluster'] == cluster\n",
        "\n",
        "    # Predict with Random Forest\n",
        "    rf_y_pred_proba[cluster_test_mask] = cluster_models[f'RF_Cluster_{cluster}'].predict_proba(X_test_preprocessed[cluster_test_mask])[:, 1]\n",
        "\n",
        "    # Predict with XGBoost\n",
        "    xgb_y_pred_proba[cluster_test_mask] = cluster_models[f'XGB_Cluster_{cluster}'].predict_proba(X_test_preprocessed[cluster_test_mask])[:, 1]\n",
        "\n",
        "# Step 7: Evaluate Random Forest Model\n",
        "rf_y_pred = (rf_y_pred_proba >= 0.5).astype(int)\n",
        "rf_accuracy = accuracy_score(y_test, rf_y_pred)\n",
        "rf_roc_auc = roc_auc_score(y_test, rf_y_pred_proba)\n",
        "rf_conf_matrix = confusion_matrix(y_test, rf_y_pred)\n",
        "rf_class_report = classification_report(y_test, rf_y_pred)\n",
        "\n",
        "# Print Random Forest results\n",
        "print(\"Random Forest Results:\")\n",
        "print(f\"Accuracy: {rf_accuracy:.4f}\")\n",
        "print(f\"ROC-AUC: {rf_roc_auc:.4f}\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(rf_conf_matrix)\n",
        "print(\"Classification Report:\")\n",
        "print(rf_class_report)\n",
        "\n",
        "# Step 8: Evaluate XGBoost Model\n",
        "xgb_y_pred = (xgb_y_pred_proba >= 0.5).astype(int)\n",
        "xgb_accuracy = accuracy_score(y_test, xgb_y_pred)\n",
        "xgb_roc_auc = roc_auc_score(y_test, xgb_y_pred_proba)\n",
        "xgb_conf_matrix = confusion_matrix(y_test, xgb_y_pred)\n",
        "xgb_class_report = classification_report(y_test, xgb_y_pred)\n",
        "\n",
        "# Print XGBoost results\n",
        "print(\"\\nXGBoost Results:\")\n",
        "print(f\"Accuracy: {xgb_accuracy:.4f}\")\n",
        "print(f\"ROC-AUC: {xgb_roc_auc:.4f}\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(xgb_conf_matrix)\n",
        "print(\"Classification Report:\")\n",
        "print(xgb_class_report)\n",
        "\n",
        "# Step 9: Plot ROC Curves for Both Models\n",
        "# Random Forest ROC Curve\n",
        "fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_test, rf_y_pred_proba)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(fpr_rf, tpr_rf, label=f'Random Forest ROC Curve (AUC = {rf_roc_auc:.2f})')\n",
        "\n",
        "# XGBoost ROC Curve\n",
        "fpr_xgb, tpr_xgb, thresholds_xgb = roc_curve(y_test, xgb_y_pred_proba)\n",
        "plt.plot(fpr_xgb, tpr_xgb, label=f'XGBoost ROC Curve (AUC = {xgb_roc_auc:.2f})')\n",
        "\n",
        "# Plot settings\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Step 10: Plot Confusion Matrices for Both Models\n",
        "# Random Forest Confusion Matrix\n",
        "plt.figure(figsize=(16, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.heatmap(rf_conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('Random Forest Confusion Matrix')\n",
        "\n",
        "# XGBoost Confusion Matrix\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.heatmap(xgb_conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.title('XGBoost Confusion Matrix')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ScGQlYrJxd7D",
        "outputId": "6a5aa889-7d04-42c7-9f0a-4af38157a608"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [10:40:17] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Decision Tree\n",
            "Training Accuracy: 0.7996\n",
            "Testing Accuracy: 0.7875\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.85      0.85      1033\n",
            "           1       0.60      0.63      0.61       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.74      0.73      1407\n",
            "weighted avg       0.79      0.79      0.79      1407\n",
            "\n",
            "Confusion Matrix:\n",
            "[[874 159]\n",
            " [140 234]]\n",
            "\n",
            "Random Forest\n",
            "Training Accuracy: 0.8452\n",
            "Testing Accuracy: 0.7932\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.90      0.86      1033\n",
            "           1       0.64      0.50      0.56       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.74      0.70      0.71      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "Confusion Matrix:\n",
            "[[929 104]\n",
            " [187 187]]\n",
            "\n",
            "XGBoost\n",
            "Training Accuracy: 0.8469\n",
            "Testing Accuracy: 0.7939\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.88      0.86      1033\n",
            "           1       0.63      0.55      0.58       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.74      0.71      0.72      1407\n",
            "weighted avg       0.79      0.79      0.79      1407\n",
            "\n",
            "Confusion Matrix:\n",
            "[[913 120]\n",
            " [170 204]]\n",
            "\n",
            "CatBoost\n",
            "Training Accuracy: 0.8377\n",
            "Testing Accuracy: 0.7946\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.89      0.86      1033\n",
            "           1       0.64      0.52      0.58       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.74      0.71      0.72      1407\n",
            "weighted avg       0.79      0.79      0.79      1407\n",
            "\n",
            "Confusion Matrix:\n",
            "[[922 111]\n",
            " [178 196]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from catboost import CatBoostClassifier\n",
        "\n",
        "# Hyperparameters to prevent overfitting\n",
        "decision_tree_params = {'max_depth': 5, 'min_samples_split': 10, 'min_samples_leaf': 5, 'random_state': 42}\n",
        "random_forest_params = {'n_estimators': 100, 'max_depth': 10, 'min_samples_split': 10, 'min_samples_leaf': 5, 'random_state': 42}\n",
        "xgboost_params = {'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.1, 'random_state': 42}\n",
        "catboost_params = {'iterations': 100, 'depth': 6, 'learning_rate': 0.1, 'verbose': False, 'random_seed': 42}\n",
        "\n",
        "# Decision Tree\n",
        "dt_model = DecisionTreeClassifier(**decision_tree_params)\n",
        "dt_model.fit(X_train, y_train)\n",
        "\n",
        "# Random Forest\n",
        "rf_model = RandomForestClassifier(**random_forest_params)\n",
        "rf_model.fit(X_train, y_train)\n",
        "\n",
        "# XGBoost\n",
        "xgb_model = XGBClassifier(**xgboost_params, use_label_encoder=False, eval_metric='logloss')\n",
        "xgb_model.fit(X_train, y_train)\n",
        "\n",
        "# CatBoost\n",
        "catboost_model = CatBoostClassifier(**catboost_params)\n",
        "catboost_model.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate models\n",
        "models = {'Decision Tree': dt_model, 'Random Forest': rf_model, 'XGBoost': xgb_model, 'CatBoost': catboost_model}\n",
        "\n",
        "# Print results for all models\n",
        "for name, model in models.items():\n",
        "    y_pred_train = model.predict(X_train)\n",
        "    y_pred_test = model.predict(X_test)\n",
        "\n",
        "    train_accuracy = accuracy_score(y_train, y_pred_train)\n",
        "    test_accuracy = accuracy_score(y_test, y_pred_test)\n",
        "    classification_rep = classification_report(y_test, y_pred_test)\n",
        "    confusion_mat = confusion_matrix(y_test, y_pred_test)\n",
        "\n",
        "    print(f\"\\n{name}\")\n",
        "    print(f\"Training Accuracy: {train_accuracy:.4f}\")\n",
        "    print(f\"Testing Accuracy: {test_accuracy:.4f}\")\n",
        "    print(\"Classification Report:\")\n",
        "    print(classification_rep)\n",
        "    print(\"Confusion Matrix:\")\n",
        "    print(confusion_mat)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8GpRVqtPzbv5",
        "outputId": "78c2d469-a1ff-4824-d34a-bcd5188dc14d"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/dask/dataframe/__init__.py:42: FutureWarning: \n",
            "Dask dataframe query planning is disabled because dask-expr is not installed.\n",
            "\n",
            "You can install it with `pip install dask[dataframe]` or `conda install dask`.\n",
            "This will raise in a future version.\n",
            "\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "--- Resampling Method: Original ---\n",
            "\n",
            "Model: Logistic Regression\n",
            "Accuracy: 0.7996\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.88      0.87      1033\n",
            "           1       0.64      0.56      0.60       374\n",
            "\n",
            "    accuracy                           0.80      1407\n",
            "   macro avg       0.74      0.72      0.73      1407\n",
            "weighted avg       0.79      0.80      0.80      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Decision Tree\n",
            "Accuracy: 0.7875\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.85      0.85      1033\n",
            "           1       0.60      0.63      0.61       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.74      0.73      1407\n",
            "weighted avg       0.79      0.79      0.79      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Random Forest\n",
            "Accuracy: 0.7932\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.90      0.86      1033\n",
            "           1       0.64      0.50      0.56       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.74      0.70      0.71      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [10:54:15] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: XGBoost\n",
            "Accuracy: 0.7939\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.88      0.86      1033\n",
            "           1       0.63      0.55      0.58       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.74      0.71      0.72      1407\n",
            "weighted avg       0.79      0.79      0.79      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: CatBoost\n",
            "Accuracy: 0.7946\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.89      0.86      1033\n",
            "           1       0.64      0.52      0.58       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.74      0.71      0.72      1407\n",
            "weighted avg       0.79      0.79      0.79      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "[LightGBM] [Info] Number of positive: 1495, number of negative: 4130\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001740 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 634\n",
            "[LightGBM] [Info] Number of data points in the train set: 5625, number of used features: 28\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.265778 -> initscore=-1.016151\n",
            "[LightGBM] [Info] Start training from score -1.016151\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "Model: LightGBM\n",
            "Accuracy: 0.7925\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.88      0.86      1033\n",
            "           1       0.62      0.55      0.59       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.72      0.72      1407\n",
            "weighted avg       0.79      0.79      0.79      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: Gradient Boosting\n",
            "Accuracy: 0.7889\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.88      0.86      1033\n",
            "           1       0.62      0.55      0.58       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.71      0.72      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: AdaBoost\n",
            "Accuracy: 0.7925\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.89      0.86      1033\n",
            "           1       0.63      0.52      0.57       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.73      0.71      0.72      1407\n",
            "weighted avg       0.78      0.79      0.79      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: KNN\n",
            "Accuracy: 0.7569\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.83      0.83      1033\n",
            "           1       0.54      0.56      0.55       374\n",
            "\n",
            "    accuracy                           0.76      1407\n",
            "   macro avg       0.69      0.69      0.69      1407\n",
            "weighted avg       0.76      0.76      0.76      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: SVM\n",
            "Accuracy: 0.7946\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.91      0.87      1033\n",
            "           1       0.65      0.49      0.56       374\n",
            "\n",
            "    accuracy                           0.79      1407\n",
            "   macro avg       0.74      0.70      0.71      1407\n",
            "weighted avg       0.78      0.79      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Naive Bayes\n",
            "Accuracy: 0.6404\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.56      0.69      1033\n",
            "           1       0.42      0.87      0.56       374\n",
            "\n",
            "    accuracy                           0.64      1407\n",
            "   macro avg       0.67      0.71      0.63      1407\n",
            "weighted avg       0.79      0.64      0.66      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: MLP Neural Network\n",
            "Accuracy: 0.7704\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.86      0.85      1033\n",
            "           1       0.57      0.53      0.55       374\n",
            "\n",
            "    accuracy                           0.77      1407\n",
            "   macro avg       0.70      0.69      0.70      1407\n",
            "weighted avg       0.77      0.77      0.77      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "\n",
            "--- Resampling Method: SMOTE ---\n",
            "\n",
            "Model: Logistic Regression\n",
            "Accuracy: 0.7313\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.71      0.80      1033\n",
            "           1       0.50      0.78      0.61       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.70      0.75      0.70      1407\n",
            "weighted avg       0.79      0.73      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Decision Tree\n",
            "Accuracy: 0.7399\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.74      0.81      1033\n",
            "           1       0.51      0.73      0.60       374\n",
            "\n",
            "    accuracy                           0.74      1407\n",
            "   macro avg       0.70      0.74      0.70      1407\n",
            "weighted avg       0.78      0.74      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: Random Forest\n",
            "Accuracy: 0.7662\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.78      0.83      1033\n",
            "           1       0.55      0.72      0.62       374\n",
            "\n",
            "    accuracy                           0.77      1407\n",
            "   macro avg       0.72      0.75      0.73      1407\n",
            "weighted avg       0.80      0.77      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [10:54:54] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: XGBoost\n",
            "Accuracy: 0.7768\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.82      0.84      1033\n",
            "           1       0.57      0.66      0.61       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.72      0.74      0.73      1407\n",
            "weighted avg       0.79      0.78      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: CatBoost\n",
            "Accuracy: 0.7818\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.82      0.85      1033\n",
            "           1       0.58      0.68      0.62       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.73      0.75      0.73      1407\n",
            "weighted avg       0.80      0.78      0.79      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "[LightGBM] [Info] Number of positive: 4130, number of negative: 4130\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001318 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 2500\n",
            "[LightGBM] [Info] Number of data points in the train set: 8260, number of used features: 28\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "Model: LightGBM\n",
            "Accuracy: 0.7754\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.82      0.84      1033\n",
            "           1       0.57      0.64      0.60       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.72      0.73      0.72      1407\n",
            "weighted avg       0.79      0.78      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: Gradient Boosting\n",
            "Accuracy: 0.7790\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.83      0.85      1033\n",
            "           1       0.58      0.64      0.61       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.72      0.74      0.73      1407\n",
            "weighted avg       0.79      0.78      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: AdaBoost\n",
            "Accuracy: 0.7306\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.72      0.80      1033\n",
            "           1       0.50      0.77      0.60       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.70      0.74      0.70      1407\n",
            "weighted avg       0.79      0.73      0.74      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: KNN\n",
            "Accuracy: 0.7029\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.69      0.77      1033\n",
            "           1       0.46      0.74      0.57       374\n",
            "\n",
            "    accuracy                           0.70      1407\n",
            "   macro avg       0.67      0.71      0.67      1407\n",
            "weighted avg       0.77      0.70      0.72      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: SVM\n",
            "Accuracy: 0.7413\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.74      0.81      1033\n",
            "           1       0.51      0.75      0.61       374\n",
            "\n",
            "    accuracy                           0.74      1407\n",
            "   macro avg       0.70      0.74      0.71      1407\n",
            "weighted avg       0.79      0.74      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Naive Bayes\n",
            "Accuracy: 0.6432\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.57      0.70      1033\n",
            "           1       0.42      0.86      0.56       374\n",
            "\n",
            "    accuracy                           0.64      1407\n",
            "   macro avg       0.67      0.71      0.63      1407\n",
            "weighted avg       0.78      0.64      0.66      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTETomek or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The TomekLinks or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: MLP Neural Network\n",
            "Accuracy: 0.7456\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.78      0.82      1033\n",
            "           1       0.52      0.66      0.58       374\n",
            "\n",
            "    accuracy                           0.75      1407\n",
            "   macro avg       0.69      0.72      0.70      1407\n",
            "weighted avg       0.77      0.75      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "\n",
            "--- Resampling Method: SMOTETomek ---\n",
            "\n",
            "Model: Logistic Regression\n",
            "Accuracy: 0.7292\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.71      0.79      1033\n",
            "           1       0.49      0.78      0.61       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.70      0.75      0.70      1407\n",
            "weighted avg       0.79      0.73      0.74      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Decision Tree\n",
            "Accuracy: 0.7392\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.74      0.81      1033\n",
            "           1       0.51      0.73      0.60       374\n",
            "\n",
            "    accuracy                           0.74      1407\n",
            "   macro avg       0.70      0.74      0.70      1407\n",
            "weighted avg       0.78      0.74      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Random Forest\n",
            "Accuracy: 0.7683\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.78      0.83      1033\n",
            "           1       0.55      0.74      0.63       374\n",
            "\n",
            "    accuracy                           0.77      1407\n",
            "   macro avg       0.72      0.76      0.73      1407\n",
            "weighted avg       0.80      0.77      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [10:55:58] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: XGBoost\n",
            "Accuracy: 0.7754\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.82      0.84      1033\n",
            "           1       0.57      0.64      0.60       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.72      0.73      0.72      1407\n",
            "weighted avg       0.79      0.78      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: CatBoost\n",
            "Accuracy: 0.7825\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.83      0.85      1033\n",
            "           1       0.58      0.66      0.62       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.72      0.74      0.73      1407\n",
            "weighted avg       0.79      0.78      0.79      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "[LightGBM] [Info] Number of positive: 3954, number of negative: 3954\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001329 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 2500\n",
            "[LightGBM] [Info] Number of data points in the train set: 7908, number of used features: 28\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "Model: LightGBM\n",
            "Accuracy: 0.7783\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.82      0.85      1033\n",
            "           1       0.57      0.65      0.61       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.72      0.74      0.73      1407\n",
            "weighted avg       0.79      0.78      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: Gradient Boosting\n",
            "Accuracy: 0.7761\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.83      0.84      1033\n",
            "           1       0.57      0.63      0.60       374\n",
            "\n",
            "    accuracy                           0.78      1407\n",
            "   macro avg       0.72      0.73      0.72      1407\n",
            "weighted avg       0.78      0.78      0.78      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: AdaBoost\n",
            "Accuracy: 0.7285\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.71      0.79      1033\n",
            "           1       0.49      0.77      0.60       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.69      0.74      0.70      1407\n",
            "weighted avg       0.79      0.73      0.74      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: KNN\n",
            "Accuracy: 0.7036\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.68      0.77      1033\n",
            "           1       0.46      0.76      0.58       374\n",
            "\n",
            "    accuracy                           0.70      1407\n",
            "   macro avg       0.68      0.72      0.67      1407\n",
            "weighted avg       0.77      0.70      0.72      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: SVM\n",
            "Accuracy: 0.7434\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.74      0.81      1033\n",
            "           1       0.51      0.75      0.61       374\n",
            "\n",
            "    accuracy                           0.74      1407\n",
            "   macro avg       0.70      0.75      0.71      1407\n",
            "weighted avg       0.79      0.74      0.76      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Naive Bayes\n",
            "Accuracy: 0.6411\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.56      0.70      1033\n",
            "           1       0.42      0.86      0.56       374\n",
            "\n",
            "    accuracy                           0.64      1407\n",
            "   macro avg       0.67      0.71      0.63      1407\n",
            "weighted avg       0.78      0.64      0.66      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTEENN or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The EditedNearestNeighbours or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: MLP Neural Network\n",
            "Accuracy: 0.7441\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      0.77      0.82      1033\n",
            "           1       0.51      0.66      0.58       374\n",
            "\n",
            "    accuracy                           0.74      1407\n",
            "   macro avg       0.69      0.72      0.70      1407\n",
            "weighted avg       0.77      0.74      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "\n",
            "--- Resampling Method: SMOTEENN ---\n",
            "\n",
            "Model: Logistic Regression\n",
            "Accuracy: 0.6844\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.62      0.74      1033\n",
            "           1       0.45      0.85      0.59       374\n",
            "\n",
            "    accuracy                           0.68      1407\n",
            "   macro avg       0.69      0.74      0.67      1407\n",
            "weighted avg       0.80      0.68      0.70      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Decision Tree\n",
            "Accuracy: 0.7093\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.67      0.77      1033\n",
            "           1       0.47      0.81      0.60       374\n",
            "\n",
            "    accuracy                           0.71      1407\n",
            "   macro avg       0.69      0.74      0.68      1407\n",
            "weighted avg       0.79      0.71      0.73      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Random Forest\n",
            "Accuracy: 0.7136\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.67      0.77      1033\n",
            "           1       0.48      0.84      0.61       374\n",
            "\n",
            "    accuracy                           0.71      1407\n",
            "   macro avg       0.70      0.75      0.69      1407\n",
            "weighted avg       0.80      0.71      0.73      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:158: UserWarning: [10:56:56] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: XGBoost\n",
            "Accuracy: 0.7271\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.70      0.79      1033\n",
            "           1       0.49      0.80      0.61       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.70      0.75      0.70      1407\n",
            "weighted avg       0.80      0.73      0.74      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: CatBoost\n",
            "Accuracy: 0.7313\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.70      0.79      1033\n",
            "           1       0.50      0.82      0.62       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.70      0.76      0.71      1407\n",
            "weighted avg       0.80      0.73      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "[LightGBM] [Info] Number of positive: 2956, number of negative: 2272\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000923 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 1625\n",
            "[LightGBM] [Info] Number of data points in the train set: 5228, number of used features: 28\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.565417 -> initscore=0.263177\n",
            "[LightGBM] [Info] Start training from score 0.263177\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: LightGBM\n",
            "Accuracy: 0.7321\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.71      0.79      1033\n",
            "           1       0.50      0.80      0.61       374\n",
            "\n",
            "    accuracy                           0.73      1407\n",
            "   macro avg       0.70      0.75      0.70      1407\n",
            "weighted avg       0.80      0.73      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Gradient Boosting\n",
            "Accuracy: 0.7406\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.72      0.80      1033\n",
            "           1       0.51      0.80      0.62       374\n",
            "\n",
            "    accuracy                           0.74      1407\n",
            "   macro avg       0.71      0.76      0.71      1407\n",
            "weighted avg       0.80      0.74      0.75      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: AdaBoost\n",
            "Accuracy: 0.6979\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.65      0.76      1033\n",
            "           1       0.46      0.82      0.59       374\n",
            "\n",
            "    accuracy                           0.70      1407\n",
            "   macro avg       0.69      0.74      0.68      1407\n",
            "weighted avg       0.79      0.70      0.72      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: KNN\n",
            "Accuracy: 0.6731\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.60      0.73      1033\n",
            "           1       0.44      0.88      0.59       374\n",
            "\n",
            "    accuracy                           0.67      1407\n",
            "   macro avg       0.69      0.74      0.66      1407\n",
            "weighted avg       0.80      0.67      0.69      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: SVM\n",
            "Accuracy: 0.7008\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.65      0.76      1033\n",
            "           1       0.46      0.83      0.60       374\n",
            "\n",
            "    accuracy                           0.70      1407\n",
            "   macro avg       0.69      0.74      0.68      1407\n",
            "weighted avg       0.80      0.70      0.72      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: Naive Bayes\n",
            "Accuracy: 0.6233\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.52      0.67      1033\n",
            "           1       0.41      0.90      0.56       374\n",
            "\n",
            "    accuracy                           0.62      1407\n",
            "   macro avg       0.67      0.71      0.62      1407\n",
            "weighted avg       0.79      0.62      0.64      1407\n",
            "\n",
            "--------------------------------------------------\n",
            "Model: MLP Neural Network\n",
            "Accuracy: 0.7235\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.70      0.79      1033\n",
            "           1       0.49      0.80      0.61       374\n",
            "\n",
            "    accuracy                           0.72      1407\n",
            "   macro avg       0.70      0.75      0.70      1407\n",
            "weighted avg       0.79      0.72      0.74      1407\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from catboost import CatBoostClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.combine import SMOTETomek, SMOTEENN\n",
        "\n",
        "# Define models\n",
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(max_iter=1000, random_state=42),\n",
        "    \"Decision Tree\": DecisionTreeClassifier(max_depth=5, min_samples_split=10, min_samples_leaf=5, random_state=42),\n",
        "    \"Random Forest\": RandomForestClassifier(n_estimators=100, max_depth=10, min_samples_split=10, min_samples_leaf=5, random_state=42),\n",
        "    \"XGBoost\": XGBClassifier(n_estimators=100, max_depth=5, learning_rate=0.1, random_state=42, use_label_encoder=False, eval_metric='logloss'),\n",
        "    \"CatBoost\": CatBoostClassifier(iterations=100, depth=6, learning_rate=0.1, verbose=False, random_seed=42),\n",
        "    \"LightGBM\": LGBMClassifier(n_estimators=100, max_depth=5, learning_rate=0.1, random_state=42),\n",
        "    \"Gradient Boosting\": GradientBoostingClassifier(n_estimators=100, max_depth=5, learning_rate=0.1, random_state=42),\n",
        "    \"AdaBoost\": AdaBoostClassifier(n_estimators=100, random_state=42),\n",
        "    \"KNN\": KNeighborsClassifier(n_neighbors=5),\n",
        "    \"SVM\": SVC(probability=True, kernel='rbf', random_state=42),\n",
        "    \"Naive Bayes\": GaussianNB(),\n",
        "    \"MLP Neural Network\": MLPClassifier(hidden_layer_sizes=(100,), max_iter=500, random_state=42)\n",
        "}\n",
        "\n",
        "# Resampling methods\n",
        "resampling_methods = {\n",
        "    \"Original\": None,\n",
        "    \"SMOTE\": SMOTE(random_state=42),\n",
        "    \"SMOTETomek\": SMOTETomek(random_state=42),\n",
        "    \"SMOTEENN\": SMOTEENN(random_state=42)\n",
        "}\n",
        "\n",
        "# Evaluate models with each resampling technique\n",
        "for method_name, resampler in resampling_methods.items():\n",
        "    print(f\"\\n--- Resampling Method: {method_name} ---\\n\")\n",
        "\n",
        "    if resampler:\n",
        "        X_resampled, y_resampled = resampler.fit_resample(X_train, y_train)\n",
        "    else:\n",
        "        X_resampled, y_resampled = X_train, y_train\n",
        "\n",
        "    for model_name, model in models.items():\n",
        "        model.fit(X_resampled, y_resampled)\n",
        "        y_pred = model.predict(X_test)\n",
        "\n",
        "        # Metrics\n",
        "        accuracy = accuracy_score(y_test, y_pred)\n",
        "        classif_report = classification_report(y_test, y_pred, zero_division=0)\n",
        "\n",
        "        # Print results\n",
        "        print(f\"Model: {model_name}\")\n",
        "        print(f\"Accuracy: {accuracy:.4f}\")\n",
        "        print(\"Classification Report:\")\n",
        "        print(classif_report)\n",
        "        print(\"-\" * 50)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "zKCQrFEq2nln",
        "outputId": "ddd862fa-16a9-44bc-ef1d-af08b9bbcb06"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 0 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 0 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 0 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# Example DataFrame (replace with your actual data)\n",
        "# df = pd.read_csv('your_dataset.csv')  # Uncomment and load your dataset\n",
        "\n",
        "columns_to_plot = ['MonthlyCharges', 'TotalCharges', 'tenure']\n",
        "\n",
        "# Loop through each column to generate Q-Q plot\n",
        "for column in columns_to_plot:\n",
        "    plt.figure(figsize=(6, 6))\n",
        "    sm.qqplot(df[column], line='s', fit=True)\n",
        "    plt.title(f'Q-Q Plot for {column}')\n",
        "    plt.grid()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QuV8rOpk5RiK",
        "outputId": "ae5e2708-6ab5-4ace-bf3f-40a8a4b0170d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Skewness for MonthlyCharges: -0.2221\n",
            "Skewness for TotalCharges: 0.9616\n",
            "Skewness for tenure: 0.2377\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Example DataFrame (replace with your actual data)\n",
        "# df = pd.read_csv('your_dataset.csv')  # Uncomment and load your dataset\n",
        "\n",
        "# Columns to calculate skewness for\n",
        "columns_to_analyze = ['MonthlyCharges', 'TotalCharges', 'tenure']\n",
        "\n",
        "# Calculate skewness for each column\n",
        "for column in columns_to_analyze:\n",
        "    skewness = df[column].skew()\n",
        "    print(f\"Skewness for {column}: {skewness:.4f}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "mEiccXWp5iI4",
        "outputId": "4347d9bb-ebca-497d-87de-79fba5cbc7ea"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-36-ba4ef43c8288>:13: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[column], kde=True, hist=True, color='blue')\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-36-ba4ef43c8288>:13: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[column], kde=True, hist=True, color='blue')\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-36-ba4ef43c8288>:13: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df[column], kde=True, hist=True, color='blue')\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Example DataFrame (replace with your actual data)\n",
        "# df = pd.read_csv('your_dataset.csv')  # Uncomment and load your dataset\n",
        "\n",
        "# Columns to plot\n",
        "columns_to_plot = ['MonthlyCharges', 'TotalCharges', 'tenure']\n",
        "\n",
        "# Plot distribution for each column\n",
        "for column in columns_to_plot:\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    sns.distplot(df[column], kde=True, hist=True, color='blue')\n",
        "    plt.title(f'Distribution of {column}', fontsize=14)\n",
        "    plt.xlabel(column, fontsize=12)\n",
        "    plt.ylabel('Density', fontsize=12)\n",
        "    plt.grid(True)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UjqorF9X6BTd"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}